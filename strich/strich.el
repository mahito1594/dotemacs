;;; strich.el --- My configuration file for Emacs -*- lexical-binding: t -*-

;; Copyright (C) 2019  TANNO Mahito

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; `strich.el' is my configuration for Emacs.  You can get details in
;; `strich.org' or in `strich.html' generated by Org-mode.

;; Do not edit this file directly.  If you want to edit `strich.el',
;; you must edit `strich.org' instead.

;;; Code:

(defgroup strich nil
  "Customize your Emacs configuration via Strich."
  :prefix "strich-"
  :group 'emacs
  :link '(url-link :tag "GitHub" "https://github.com/mahito1594/dotemacs"))

(defvar strich-locate-strich-elisp-file (expand-file-name (concat user-emacs-directory
                                                                  "strich/strich.el"))
  "Place where `strich.el' should be.")

(defvar strich-locate-strich-org-file (expand-file-name (concat user-emacs-directory
                                                                "strich/strich.org"))
  "Place where `strich.org' should be.")

(defvar strich-locate-strich-html-file (expand-file-name (concat user-emacs-directory
                                                                 "strich/doc/index.html"))
  "Place where `strich.html' shouled be.")

(defcustom strich-backup-directory (locate-user-emacs-file "backups/")
  "We save automatically files into the directory:
We set `backup-directory-alist' and `auto-save-file-name-transforms' to `strich-backup-directory'."
  :type 'directory
  :group 'strich)

(defun strich-open-html-doc ()
  "Open Strich document in default browser."
  (interactive)
  (browse-url-of-file strich-locate-strich-html-file))

(defun strich-open-org-doc ()
  "Open Strich document in Org-mode."
  (interactive)
  (view-file strich-locate-strich-org-file))

(defun strich-edit-strich ()
  "Open `strich.org' to edit."
  (interactive)
  (find-file strich-locate-strich-org-file))

(defun strich-make-init-elisp ()
  "Make `strich.el' with `org-babel-tangle'."
  (interactive)
  (with-current-buffer
      (find-file-noselect strich-locate-strich-org-file)
    (org-babel-tangle))
  (write-region (concat "\n"
                        ";; Local Variables:\n"
                        ";; buffer-read-only: t\n"
                        ";; End:")
                nil strich-locate-strich-elisp-file 'append)
  (message "%s is created!" strich-locate-strich-elisp-file))

(defun strich-make-document-html ()
  "Make document html file."
  (interactive)
  (straight-use-package 'org)
  (straight-use-package 'htmlize)
  (with-current-buffer (find-file-noselect strich-locate-strich-org-file)
    (setq-local org-html-htmlize-output-type 'css)
    (org-html-export-to-html)))

(setq straight-repository-branch "develop") ; use the develop branch of straight.el
(setq straight-check-for-modifications 'live-with-find) ; => '(check-on-save find-when-checking)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(setq straight-use-package-by-default t)
(setq use-package-always-defer t)

(defmacro use-feature (name &rest args)
  "Like `use-package', but with `straight-use-package-by-default' disabled."
  (declare (indent defun))
  `(use-package ,name
     :straight nil
     ,@args))

(straight-use-package 'org)

(use-package blackout
  :straight (:host github :repo "raxod502/blackout")
  :demand t)

(use-package all-the-icons
  :demand t
  :config
  (unless (member "all-the-icons" (font-family-list))
    (all-the-icons-install-fonts t)))

(set-language-environment "Japanese")
(prefer-coding-system 'utf-8)

(use-package mozc
  :if (eq system-type 'gnu/linux)
  :demand t
  :config
  (setq default-input-method "japanese-mozc"))

(use-feature ucs-normalize
  :if (eq system-type 'darwin)
  :demand t
  :config
  (set-file-name-coding-system 'utf-8-hfs)
  (setq locale-coding-system 'utf-8-hfs))

(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :demand t
  :config
  (exec-path-from-shell-initialize))

(use-feature server
  :hook (after-init . server-mode))

(setq backup-directory-alist
      `((".*" . ,strich-backup-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,strich-backup-directory t)))

(use-package all-the-icons-dired
  :if (window-system)
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package neotree
  :bind (("C-c t" . neotree-toggle))
  :custom
  (neo-theme (if (display-graphic-p)
                 'classic
               'arrow)))

(use-package counsel
  :hook ((after-init . ivy-mode)
         (ivy-mode . counsel-mode))
  :bind (("C-s" . swiper)
         ("C-r" . swiper)
         ("C-S-s" . swiper-all)
         ("C-c C-r" . ivy-resume)
         :map ivy-minibuffer-map
         ("<tab>" . ivy-alt-done)
         ("C-w" . ivy-yank-word))
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "(%d/%d) ")
  (ivy-wrap t)
  (ivy-format-function 'ivy-format-function-arrow)
  (counsel-yank-pop "\n---------\n")
  (ivy-initial-inputs-alist nil)
  :blackout t)

(use-package ivy-rich
  :defines (all-the-icons-dir-icon-alist)
  :functions (all-the-icons-icon-family
              all-the-icons-icon-for-mode
              all-the-icons-icon-for-file
              all-the-icons-octicon
              all-the-icons-match-to-alist)
  :preface
  (defun strich-ivy-rich-buffer-icon (candidate)
    "Show buffer isons in `ivy-rich', only on GUI."
    (when (display-graphic-p)
      (with-current-buffer
          (get-buffer candidate)
        (let ((icon (all-the-icons-icon-for-mode major-mode)))
          (if (symbolp icon)
              (all-the-icons-icon-for-mode 'fundamental-mode)
            icon)))))
  (defun strich-ivy-rich-file-icon (candidate)
    "Show file icons in `ivy-rich', only on GUI."
    (when (display-graphic-p)
      (let ((icon
             ;; for directories
             (if (file-directory-p candidate)
                 (cond
                  ;; for `tramp-mode'
                  ((and (fboundp 'tramp-tramp-file-p)
                        (tramp-tramp-file-p default-directory))
                   (all-the-icons-octicon "file-directory"))
                  ;; for symbolic links
                  ((file-symlink-p candidate)
                   (all-the-icons-octicon "file-symlink-directory"))
                  ;; for git submodules
                  ((all-the-icons-dir-is-submodule candidate)
                   (all-the-icons-octicon "file-submodule"))
                  ;; for version-controled by git
                  ((file-exists-p (format "%s/.git" candidate))
                   (all-the-icons-octicon "repo"))
                  ;; otherwise
                  (t (let ((matcher (all-the-icons-match-to-alist candidate all-the-icons-dir-icon-alist)))
                       (apply (car matcher) (list (cadr matcher))))))
               ;; for files
               (all-the-icons-icon-for-file candidate))))
        (unless (symbolp icon)
          (propertize icon
                      'face `(:family ,(all-the-icons-icon-family icon) :height 1.1))))))
  :hook (ivy-mode . ivy-rich-mode)
  :custom
  (ivy-rich-path-style 'abbrev)
  (ivy-rich-display-transformers-list
   '(ivy-switch-buffer
     (:columns
      ((strich-ivy-rich-buffer-icon :width 2)
       (ivy-rich-candidate (:width 30))
       (ivy-rich-switch-buffer-size (:width 7))
       (ivy-rich-switch-buffer-indicators (:width 4 :face error :align left))
       (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
       (ivy-rich-switch-buffer-project (:width 15 :face success))
       (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
      :predicate
      (lambda (cand) (get-buffer cand)))
     counsel-M-x
     (:columns
      ((counsel-M-x-transformer (:width 40))
       (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
     counsel-describe-function
     (:columns
      ((counsel-describe-function-transformer (:width 40))
       (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
     counsel-describe-variable
     (:columns
      ((counsel-describe-variable-transformer (:width 40))
       (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
     counsel-recentf
     (:columns
      ((ivy-rich-candidate (:width 0.8))
       (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))
     counsel-find-file
     (:columns
      ((strich-ivy-rich-file-icon :width 2)
       (ivy-rich-candidate)))
     counsel-git
     (:columns
      ((strich-ivy-rich-file-icon :width 2)
       (ivy-rich-candidate)))))
  :blackout t)

(use-package amx
  :hook (ivy-mode . amx-mode))

(use-package which-key
  :hook (after-init . which-key-mode)
  :bind (:map which-key-mode-map
              ("C-x DEL" . which-key-C-h-dispatch)
              ("C-c DEL" . which-key-C-h-dispatch))
  :custom
  (which-key-popup-type 'side-window)
  (which-key-side-window-location 'bottom)
  :blackout t)

(use-feature elec-pair
  :hook (after-init . electric-pair-mode))

(use-feature paren
  :hook (after-init . show-paren-mode)
  :custom
  (show-paren-style 'mixed))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-feature whitespace
  :commands (whitespace-mode)
  :bind (("C-c w" . whitespace-mode))
  :custom
  (whitespace-style '(
                      face
                      trailing
                      tabs
                      spaces
                      empty
                      space-mark
                      tab-mark
                      ))
  :blackout t)

(use-package beacon
  :hook (after-init . beacon-mode)
  :custom
  (beacon-color "yellow"))

(add-hook 'after-init-hook #'transient-mark-mode)

(setq ring-bell-function 'ignore)

(use-package yasnippet
  :blackout t)

(use-package company
  :hook (after-init . global-company-mode)
  :config
  (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
  (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous)
  (setq company-idle-delay 0)
  (setq company-selection-wrap-around t)
  (setq company-require-match 'never)
  :blackout t)

(use-package company-quickhelp
  :if (window-system)
  :hook (company-mode . company-quickhelp-mode))

(use-package company-box
  :functions (all-the-icons-faicon all-the-icons-octicon all-the-icons-material all-the-icons-alltheicon)
  :preface
  (defvar strich-company-box-icons-all-the-icons
    `((Unknown       . ,(all-the-icons-faicon     "cog"                      :height 0.9))
      (Text          . ,(all-the-icons-octicon    "file-text"                :height 0.9))
      (Method        . ,(all-the-icons-faicon     "cube"                     :height 0.9))
      (Function      . ,(all-the-icons-faicon     "cube"                     :height 0.9))
      (Constructor   . ,(all-the-icons-faicon     "cube"                     :height 0.9))
      (Field         . ,(all-the-icons-faicon     "cog"                      :height 0.9))
      (Variable      . ,(all-the-icons-faicon     "cog"                      :height 0.9))
      (Class         . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
      (Interface     . ,(all-the-icons-material   "share"                    :height 0.9))
      (Module        . ,(all-the-icons-alltheicon "less"                     :height 0.9))
      (Property      . ,(all-the-icons-faicon     "wrench"                   :height 0.9))
      (Unit          . ,(all-the-icons-material   "settings_system_daydream" :height 0.9))
      (Value         . ,(all-the-icons-material   "format_align_right"       :height 0.9))
      (Enum          . ,(all-the-icons-material   "content_copy"             :height 0.9))
      (Keyword       . ,(all-the-icons-material   "filter_center_focus"      :height 0.9))
      (Snippet       . ,(all-the-icons-material   "content_paste"            :height 0.9))
      (Color         . ,(all-the-icons-material   "palette"                  :height 0.9))
      (File          . ,(all-the-icons-faicon     "file"                     :height 0.9))
      (Reference     . ,(all-the-icons-material   "collections_bookmark"     :height 0.9))
      (Folder        . ,(all-the-icons-faicon     "folder"                   :height 0.9))
      (EnumMember    . ,(all-the-icons-material   "format_align_right"       :height 0.9))
      (Constant      . ,(all-the-icons-faicon     "square-o"                 :height 0.9))
      (Struct        . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
      (Event         . ,(all-the-icons-faicon     "bolt"                     :height 0.9))
      (Operator      . ,(all-the-icons-material   "control_point"            :height 0.9))
      (TypeParameter . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
      (Template      . ,(all-the-icons-material   "format_align_center"      :height 0.9))
      ))
  :if (and (window-system)
           (>= emacs-major-version 26))
  :hook (company-mode . company-box-mode)
  :custom
  (company-box-show-single-candidate t)
  (company-box-max-candidates 50)
  :config
  (setq company-box-backends-colors nil)
  (setq company-box-icons-alist 'strich-company-box-icons-all-the-icons)
  :blackout t)

(use-package flycheck
  :hook (after-init . global-flycheck-mode))

(use-package flycheck-popup-tip
  :hook (flycheck-mode . flycheck-popup-tip-mode))

(use-feature org
  :defines (electric-pair-pairs electric-pair-text-pairs)
  :functions (electric-pair-default-inhibit)
  :preface
  (defvar strich-org-electric-pair-pairs
    '((?~ . ?~) (?= . ?=)))

  (defun strich-org-electric-pair-inhibit (char)
    "Do not insert close `>'."
    (if (char-equal char ?<)
        t
      (electric-pair-default-inhibit char)))
  (defun strich-org-electric-pair-mode ()
    "Use Org-mode with electric-pair-mode."
    (electric-pair-mode +1)
    (setq-local electric-pair-pairs (append electric-pair-pairs
                                            strich-org-electric-pair-pairs))
    (setq-local electric-pair-text-pairs (append electric-pair-text-pairs
                                                 strich-org-electric-pair-pairs))
    (setq-local electric-pair-inhibit-predicate #'strich-org-electric-pair-inhibit))
  :hook (org-mode . strich-org-electric-pair-mode)
  :custom
  (org-startup-indented t)
  (org-fontify-natively t)
  :config
  (setq org-structure-template-alist (append '(("el" . "src emacs-lisp"))
                                             org-structure-template-alist)))

(use-package org-bullets
  :hook (org-mode . org-bullets-mode))

(use-package ox-gfm
  :demand t
  :after (org))

(use-package doom-themes
  :demand t
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  (doom-neotree-file-icons t)
  :config
  (load-theme 'doom-dracula t)
  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config)
  (doom-themes-org-config))

(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-color-icon t)
  (find-file-visit-truename t)
  :config
  (setq doom-modeline-mu4e nil
        doom-modeline-irc nil))

(setq inhibit-startup-screen t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(size-indication-mode +1)
(setq frame-title-format "%f")

(if (version<= "26.0.50" emacs-version)
    (progn
      (global-display-line-numbers-mode)
      (column-number-mode -1)
      (line-number-mode -1))
  (column-number-mode +1)
  (line-number-mode +1))

(set-frame-parameter nil 'fullscreen 'maximized)

(set-face-attribute 'default nil
                    :family "Source Han Code JP"
                    :height 140)

(define-key global-map (kbd "C-m") 'newline-and-indent)
(define-key global-map (kbd "C-2") 'set-mark-command)
(define-key global-map (kbd "C-t") 'other-window)
(define-key global-map (kbd "C-;") 'comment-line)

(define-key key-translation-map (kbd "C-h") (kbd "DEL"))
(define-key global-map (kbd "C-x ?") 'help-for-help)

(provide 'strich)
;;; strich.el ends here

;; Local Variables:
;; buffer-read-only: t
;; End:
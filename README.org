#+STARTUP: indent
#+TITLE: My configuration file for Emacs
#+AUTHOR: Mahito TANNO
#+DATE:
#+EXPORT_FILE_NAME: ./doc/index.html
#+OPTIONS: H:2
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="worg.css"/>

* Introduction
** my-init.el
~my-init.el~ に個人的な Emacs の設定をまとめてあります．
Emacs バージョン 25.4 以降での利用を想定しています．
特にバージョン 26 以降での利用を強く勧めます．

設定を記述するにあたって，以下に強い影響を受けました．

- radian
- Centaur Emacs
- doom-emacs
- Ladicle Emacs

~my-init.el~ を編集する際は ~README.org~ を編集します．
編集後に =org-babel-tangle= を用いて ~my-init.el~ を生成します．

本設定ファイルで定義する変数や関数には ~my-~ というプレフィックスをつけることにします．

#+begin_src emacs-lisp :exports none
  ;;; my-init.el --- My configuration file for Emacs -*- lexical-binding: t -*-

  ;; Copyright (C) 2019  TANNO Mahito

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; `my-init.el' is my configuration for Emacs.  You can get details in
  ;; `README.org' or in `.emacs.d/doc/index.html' generated by Org-mode.

  ;; Do not edit this file directly.  If you want to edit `my-init.el',
  ;; you must edit `README.org' instead.

  ;;; Code:
#+end_src

起動時にガベージコレクタが走らないように閾値を下げます．
また，ガベージコレクタが走ったときはエコーエリアにメッセージを出すようにします．

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 8 1000 1000))
  (setq garbage-collection-messages t)
#+end_src

** init.el
~init.el~ は ~elisp/~ と， ~site-lisp/~ およびその以下のサブディレクトリを =load-path= に追加し， ~my-init.el~ を読み込みます．
ただし Emacs のバージョンが古い場合は ~my-init.el~ は読み込まれません．

また Customize で設定したカスタム変数は ~.emacs.d/custom-file.el~ に保存されます．
これは git によって追跡されません．

** utility.el
変数・定数・関数のうち，いくつかは ~elisp/utility.el~ に抜き出します．
必要に応じてバイトコンパイルを行います．

#+begin_src emacs-lisp :exports none :tangle ./elisp/utility.el
  ;;; utility.el --- Some convenient functions for my Emacs configuration -*- lexical-binding: t -*-

  ;; Copyright (C) 2019  TANNO Mahito

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; This file is tangled from `README.org'.

  ;;; Code:
#+end_src

#+begin_src emacs-lisp
  (require 'utility)
#+end_src

* Fundamental 
** Variables
*** Init file and its document
#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defvar my-locate-readme (expand-file-name "README.org" user-emacs-directory)
    "Place where `README.org' should be.")

  (defvar my-locate-init (expand-file-name "elisp/my-init.el" user-emacs-directory)
    "Place where `my-init.el' should be.")

  (defvar my-locate-utility (expand-file-name "elisp/utility.el" user-emacs-directory)
    "Place where `utility.el' should be.")

  (defvar my-locate-document (expand-file-name "doc/index.html" user-emacs-directory)
    "Place where `index.html' should be.")
#+end_src

*** Backup file
ファイルを ~.emacs.d/backups~ 以下に自動保存します．

#+begin_src emacs-lisp
  (defvar my-backup-directory (expand-file-name "backups/" user-emacs-directory)
    "We save automatically files into the directory:
  We set `backup-directory-alist' and `auto-save-file-name-transforms' to `my-backup-directory'.")
#+end_src

*** Local configuration directory
環境・マシンごとの設定を ~.emacs.d/local~ 以下に配置します．


#+begin_src emacs-lisp
  (defvar my-local-config-directory (expand-file-name "local" user-emacs-directory)
    "You put Emacs Lisp files here for local config.")
#+end_src

** Functions
*** Open document
~M-x my-open-document~ で本設定ファイルを HTML にエクスポートしたものをブラウザで開きます．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defun my-open-document ()
    "Open document in default browser."
    (interactive)
    (browse-url-of-file my-locate-document))
#+end_src

*** Edit init file
~README.org~ を編集するには ~C-x C-f~ で開くか ~M-x my-edit-init~ とします．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defun my-edit-init ()
    "Open `README.org' to edit."
    (interactive)
    (find-file my-locate-readme))
#+end_src

~M-x my-make-all~ で ~my-init.el~, ~utility.el(c)~ と ~index.html~ を生成します．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defun my-make-all ()
    "Make `my-init.el', `utility.el' and `index.html'."
    (interactive)
    (my-make-init)
    (byte-compile-file my-locate-utility)
    (my-make-document))
#+end_src

~my-init.el~ を生成するには関数 =my-make-init= を利用します．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defun my-make-init ()
    "Make `my-init.el' with `org-babel-tangle'."
    (interactive)
    (with-current-buffer (find-file-noselect my-locate-readme)
      (org-babel-tangle)))
#+end_src


#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defun my-make-document ()
    "Make document html file."
    (interactive)
    (with-current-buffer (find-file-noselect my-locate-readme)
      (org-html-export-to-html)))
#+end_src

*** Load local configuration
=(my-load-config-files re dir)= は ~dir~ 内の，正規表現 ~re~ とマッチする ~.el~ ファイルを全てロードします．
詳しくは [[Local configuration]] を参照してください．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defun my-load-config-files (re dir)
    "Load files which match to regular expression RE in DIR."
    (when (file-directory-p dir)
      (add-to-list 'load-path dir)
      (dolist (file (my--pickup-config-files re dir))
        (condition-case err-var
            (load file)
          (error (message "%s" err-var))))))

  (defun my--pickup-config-files (re dir)
    "Pick up files which match to regular expression RE in DIR."
    (let ((files (directory-files dir))
          (targets '()))
      (dolist (file files)
        (when (and (string-match re file)
                   (string-match "\\.el\\'" file))
          (push file targets)))
      (sort targets 'string<)))
#+end_src

** Package manager
パッケージマネージャとして ~straight.el~ と ~use-package.el~ を利用します

*** straight.el
[[https://github.com/raxod502/straight.el][straight.el]] は Emacs のパッケージマネージャの 1 つです．

#+begin_quote
next-generation, purely functional package manager for the Emacs hacker.
#+end_quote

~develop~ ブランチの ~straight.el~ をインストールします．

デフォルトのままでは Emacs の起動が遅くなるので ~straight-check-for-modifications~ を ~live-with-find~ に設定しておきます．
~live-with-find~ は ~(check-on-save find-when-checking)~ と等価です．

#+begin_src emacs-lisp
  (setq straight-repository-branch "develop") ; use the develop branch of straight.el
  (setq straight-check-for-modifications 'live-with-find) ; => '(check-on-save find-when-checking)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

*** use-package.el
[[https://github.com/jwiegley/use-package][use-package]] を用いてパッケージの設定を feature 単位で記述します．

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

keywords は次の順序で書くようにします:

- =:defines=
- =:functions=
- =:preface=
- =:if= (or =:when=)
- =:straight=
- =:load-path=
- =:commands=
- =:init=
- =:mode=
- =:interpreter=
- =:hook=
- =:bind=
- =:demand=
- =:after=
- =:custom=
- =:config=
- =:blackout= 

~:preface~ は ~:if~ 節の判定に関わらず読み込まれます．
他パッケージで定義される変数や関数を用いる場合 ~:defines~ や ~:functions~ に列挙しておくのが安全なようです．
基本的に ~straight.el~ を用いてパッケージをインストールするようにします．
また，パッケージは常に遅延ロードします．
遅延ロードをさせないときは明示的に =:demand t= を指定します．
遅延ロードの際， =:after= などのキーワードを併用する場合は注意が必要です．
[[https://jwiegley.github.io/use-package/keywords/#after]] を参照してください．

#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (setq use-package-always-defer t)
#+end_src

build-in の機能を用いるため ~use-feature~ マクロを定めます．
~use-feature~ は radian.el を参考にしました．

#+begin_src emacs-lisp
  (defmacro use-feature (name &rest args)
    "Like `use-package', but with `straight-use-package-by-default' disabled."
    (declare (indent defun))
    `(use-package ,name
       :straight nil
       ,@args))
#+end_src

** Some package
いくつかのパッケージを先にインストールします．
これは Emacs 同梱の (古い) バージョンのパッケージの読み込みを避けるためです．

*** Org-mode
2019年3月現在の ~straight.el~ ではデフォルトで最新の Org-mode をインストールすることができます．

#+begin_src emacs-lisp
  (straight-use-package 'org)
#+end_src

*** blackout
[[https://github.com/raxod502/blackout][blackout]] は deminish や delight のように，メジャー・マイナーモードのモードラインの表示をカスタマイズできます．

#+begin_src emacs-lisp
  (use-package blackout
    :straight (:host github :repo "raxod502/blackout")
    :demand t)
#+end_src

*** all-the-icons
いくつかのパッケージで ~all-the-icons~ のフォントを使用します．
フォントが未インストールの場合，自動的にインストールします．

#+begin_src emacs-lisp
  (use-package all-the-icons
    :demand t
    :config
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts t)))
#+end_src

* Utilities
** Language, Codings
日本語かつ UTF8 を使用するようにします．

#+begin_src emacs-lisp
  (set-language-environment "Japanese")
  (prefer-coding-system 'utf-8)
#+end_src

また Linux 使用時は ~mozc~ を用いて日本語入力を行います．
別途 ~emacs-mozc-bin~ をインストールする必要があります．

#+begin_src emacs-lisp
  (use-package mozc
    :if (eq system-type 'gnu/linux)
    :demand t
    :config
    (setq default-input-method "japanese-mozc"))
#+end_src

macOS 使用時はファイル名の文字コードの問題があります．

#+begin_src emacs-lisp
  (use-feature ucs-normalize
    :if (eq system-type 'darwin)
    :demand t
    :config
    (set-file-name-coding-system 'utf-8-hfs)
    (setq locale-coding-system 'utf-8-hfs))
#+end_src

** Exec path
ログインシェルの環境変数を引き継ぎます．

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :demand t
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Server
Emacs 起動後に =server-start= します．

#+begin_src emacs-lisp
(use-feature server
  :hook (after-init . server-mode))
#+end_src

** Backup files
自動バックアップとオートセーブファイルを ~.emacs.d/backups~ に集めます．
~.emacs.d/backups~ は変数 =my-backup-directory= で変更できます．

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,my-backup-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,my-backup-directory t)))
  (setq auto-save-list-file-prefix
        (concat my-backup-directory
                "/.saves-"))
#+end_src

** Directories
*** dired
~dired-mode~ の際，ファイルのアイコンを表示するようにします．

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :if (window-system)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** neotree
ツリープラグインとして [[https://github.com/jaypei/emacs-neotree][neotree]] を用います．
~C-c t~ で起動します．
GUI での使用の際，all-the-icons を用いてアイコンを表示するようにします．

#+begin_src emacs-lisp
  (use-package neotree
    :bind (("C-c t" . neotree-toggle))
    :custom
    (neo-theme (if (display-graphic-p)
                   'classic
                 'arrow)))
#+end_src

** Candidates
*** Ivy, Counsel and swiper
補完インターフェイスとして [[https://github.com/abo-abo/swiper][Ivy/Counsel]] を利用します．
詳しい使い方は[[https://oremacs.com/swiper/][ユーザマニュアル]]を参照してください．

#+begin_src emacs-lisp
  (use-package counsel
    :hook ((after-init . ivy-mode)
           (ivy-mode . counsel-mode))
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-S-s" . swiper-all)
           ("C-c C-r" . ivy-resume)
           :map ivy-minibuffer-map
           ("<tab>" . ivy-alt-done)
           ("C-w" . ivy-yank-word))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    (ivy-wrap t)
    (ivy-format-function 'ivy-format-function-arrow)
    (counsel-yank-pop "\n---------\n")
    (ivy-initial-inputs-alist nil)
    :blackout t)
#+end_src

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] を用いてバッファ切り替えの際などにアイコンを表示するようにします．
関数 =my-ivy-rich-buffer-icon=, =my-ivy-rich-file-icon= を定義し，バッファ切替時等にアイコンを表示するようにします．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  ;;; for ivy-rich: show icons
  (defun my-ivy-rich-buffer-icon (candidate)
    "Show buffer isons in `ivy-rich', only on GUI."
    (when (display-graphic-p)
      (with-current-buffer
          (get-buffer candidate)
        (let ((icon (all-the-icons-icon-for-mode major-mode)))
          (if (symbolp icon)
              (all-the-icons-icon-for-mode 'fundamental-mode)
            icon)))))

  (defun my-ivy-rich-file-icon (candidate)
    "Show file icons in `ivy-rich', only on GUI."
    (when (display-graphic-p)
      (let ((icon
             ;; for directories
             (if (file-directory-p candidate)
                 (cond
                  ;; for `tramp-mode'
                  ((and (fboundp 'tramp-tramp-file-p)
                        (tramp-tramp-file-p default-directory))
                   (all-the-icons-octicon "file-directory"))
                  ;; for symbolic links
                  ((file-symlink-p candidate)
                   (all-the-icons-octicon "file-symlink-directory"))
                  ;; for git submodules
                  ((all-the-icons-dir-is-submodule candidate)
                   (all-the-icons-octicon "file-submodule"))
                  ;; for version-controled by git
                  ((file-exists-p (format "%s/.git" candidate))
                   (all-the-icons-octicon "repo"))
                  ;; otherwise
                  (t (let ((matcher (all-the-icons-match-to-alist candidate all-the-icons-dir-icon-alist)))
                       (apply (car matcher) (list (cadr matcher))))))
               ;; for files
               (all-the-icons-icon-for-file candidate))))
        (unless (symbolp icon)
          (propertize icon
                      'face `(:family ,(all-the-icons-icon-family icon) :height 1.1))))))
#+end_src

#+begin_src emacs-lisp
  (use-package ivy-rich
    :functions (my-ivy-rich-buffer-icon my-ivy-rich-file-icon)
    :hook (ivy-mode . ivy-rich-mode)
    :custom
    (ivy-rich-path-style 'abbrev)
    (ivy-rich-display-transformers-list
     '(ivy-switch-buffer
       (:columns
        ((my-ivy-rich-buffer-icon :width 2)
         (ivy-rich-candidate (:width 30))
         (ivy-rich-switch-buffer-size (:width 7))
         (ivy-rich-switch-buffer-indicators (:width 4 :face error :align left))
         (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
         (ivy-rich-switch-buffer-project (:width 15 :face success))
         (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
        :predicate
        (lambda (cand) (get-buffer cand)))
       counsel-M-x
       (:columns
        ((counsel-M-x-transformer (:width 40))
         (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
       counsel-describe-function
       (:columns
        ((counsel-describe-function-transformer (:width 40))
         (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
       counsel-describe-variable
       (:columns
        ((counsel-describe-variable-transformer (:width 40))
         (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
       counsel-recentf
       (:columns
        ((ivy-rich-candidate (:width 0.8))
         (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))
       counsel-find-file
       (:columns
        ((my-ivy-rich-file-icon :width 2)
         (ivy-rich-candidate)))
       counsel-git
       (:columns
        ((my-ivy-rich-file-icon :width 2)
         (ivy-rich-candidate)))))
    :blackout t)
#+end_src

[[https://github.com/DarwinAwardWinner/amx][amx]] を用いて ~M-x~ を ivy と統合します．

#+begin_src emacs-lisp
  (use-package amx
    :hook (ivy-mode . amx-mode))
#+end_src

*** emacs-which-key
[[https://github.com/justbur/emacs-which-key][which-key]] を用いてキーバインドを表示させます．

#+begin_src emacs-lisp
  (use-package which-key
    :hook (after-init . which-key-mode)
    :bind (:map which-key-mode-map
                ("C-x DEL" . which-key-C-h-dispatch)
                ("C-c DEL" . which-key-C-h-dispatch))
    :custom
    (which-key-popup-type 'side-window)
    (which-key-side-window-location 'bottom)
    :blackout t)
#+end_src

** Others
*** Parenthesis
対応する括弧類は自動的に挿入し，また強調するようにします．

#+begin_src emacs-lisp
  (use-feature elec-pair
    :hook (after-init . electric-pair-mode))

  (use-feature paren
    :hook (after-init . show-paren-mode)
    :custom
    (show-paren-style 'mixed))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Whitespace
~C-c w~ で空白文字を可視化します．

#+begin_src emacs-lisp
  (use-feature whitespace
    :commands (whitespace-mode)
    :bind (("C-c w" . whitespace-mode))
    :custom
    (whitespace-style '(
                        face
                        trailing
                        tabs
                        spaces
                        empty
                        space-mark
                        tab-mark
                        ))
    :blackout t)
#+end_src

*** Cursor
[[https://github.com/Malabarba/beacon][beacon]] を用いてカーソルを目立たせます．

#+begin_src emacs-lisp
  (use-package beacon
    :hook (after-init . beacon-mode)
    :custom
    (beacon-color "yellow"))
#+end_src

*** Region
選択中のリージョンをハイライトします．

#+begin_src emacs-lisp
  (add-hook 'after-init-hook #'transient-mark-mode)
#+end_src

*** Ring bell
エラー時のベル音を消します．

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

* Completion and syntax checking
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :blackout t)
#+end_src

** Company
補完には [[https://github.com/company-mode/company-mode][company-mode]] を用います．
各種設定は [[https://github.com/company-mode/company-mode/wiki/Switching-from-AC][Switching from AC]] を参考にしました．
=:bind= キーワードを使うとうまく読み込まないため， =:config= と =define-key= を利用しています

#+begin_src emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :config
    (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
    (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (setq company-idle-delay 0)
    (setq company-selection-wrap-around t)
    (setq company-require-match 'never)
    :blackout t)
#+end_src

[[https://github.com/expez/company-quickhelp][company-quickhelp]] を用いて補完候補のドキュメントを読めるようにしておきます．

#+begin_src emacs-lisp
  (use-package company-quickhelp
    :if (window-system)
    :hook (company-mode . company-quickhelp-mode))
#+end_src

[[https://github.com/sebastiencs/company-box][company-box]] を用いて補完候補にアイコンを表示します．
デフォルトの設定のままだと，アイコンが大きく感じるので適当に調整をします．

#+begin_src emacs-lisp
  (use-package company-box
    :functions (all-the-icons-faicon all-the-icons-octicon all-the-icons-material all-the-icons-alltheicon)
    :preface
    (defvar my-company-box-icons-all-the-icons
      `((Unknown       . ,(all-the-icons-faicon     "cog"                      :height 0.9))
        (Text          . ,(all-the-icons-octicon    "file-text"                :height 0.9))
        (Method        . ,(all-the-icons-faicon     "cube"                     :height 0.9))
        (Function      . ,(all-the-icons-faicon     "cube"                     :height 0.9))
        (Constructor   . ,(all-the-icons-faicon     "cube"                     :height 0.9))
        (Field         . ,(all-the-icons-faicon     "cog"                      :height 0.9))
        (Variable      . ,(all-the-icons-faicon     "cog"                      :height 0.9))
        (Class         . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
        (Interface     . ,(all-the-icons-material   "share"                    :height 0.9))
        (Module        . ,(all-the-icons-alltheicon "less"                     :height 0.9))
        (Property      . ,(all-the-icons-faicon     "wrench"                   :height 0.9))
        (Unit          . ,(all-the-icons-material   "settings_system_daydream" :height 0.9))
        (Value         . ,(all-the-icons-material   "format_align_right"       :height 0.9))
        (Enum          . ,(all-the-icons-material   "content_copy"             :height 0.9))
        (Keyword       . ,(all-the-icons-material   "filter_center_focus"      :height 0.9))
        (Snippet       . ,(all-the-icons-material   "content_paste"            :height 0.9))
        (Color         . ,(all-the-icons-material   "palette"                  :height 0.9))
        (File          . ,(all-the-icons-faicon     "file"                     :height 0.9))
        (Reference     . ,(all-the-icons-material   "collections_bookmark"     :height 0.9))
        (Folder        . ,(all-the-icons-faicon     "folder"                   :height 0.9))
        (EnumMember    . ,(all-the-icons-material   "format_align_right"       :height 0.9))
        (Constant      . ,(all-the-icons-faicon     "square-o"                 :height 0.9))
        (Struct        . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
        (Event         . ,(all-the-icons-faicon     "bolt"                     :height 0.9))
        (Operator      . ,(all-the-icons-material   "control_point"            :height 0.9))
        (TypeParameter . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
        (Template      . ,(all-the-icons-material   "format_align_center"      :height 0.9))
        ))
    :if (and (window-system)
             (>= emacs-major-version 26))
    :hook (company-mode . company-box-mode)
    :custom
    (company-box-show-single-candidate t)
    (company-box-max-candidates 50)
    :config
    (setq company-box-backends-colors nil)
    (setq company-box-icons-alist 'my-company-box-icons-all-the-icons)
    :blackout t)
#+end_src

** Flycheck
文法チェックには [[https://www.flycheck.org/en/latest/][Flycheck]] を利用します．
後述の [[LSP][LSP]] を用いる場合には暴走するという情報があるので要確認です．

#+begin_src emacs-lisp
  (use-package flycheck
    :hook (after-init . global-flycheck-mode))
#+end_src

エラー内容の表示に [[https://github.com/flycheck/flycheck-popup-tip][flycheck-popup-tip]] を利用します．

#+begin_src emacs-lisp
  (use-package flycheck-popup-tip
    :hook (flycheck-mode . flycheck-popup-tip-mode))
#+end_src

** LSP
いくつかの言語では Language Server Protocol を用いて補完・文法チェックを行います．
詳細は各言語の設定を参照してください．

ここでは [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] を利用します．
補完には [[https://github.com/tigersoldier/company-lsp][company-lsp]] を，文法チェックには [[https://github.com/emacs-lsp/lsp-ui][lsp-ui/flycheck]] を利用します．

lsp-mode と flycheck を併用するにはカスタム変数 ~lsp-prefer-flymake~ を ~nil~ にセットします．
また flycheck-popup-tip を使用していると画面がうるさくなるのでカスタム変数 ~lsp-ui-sideline-enable~ を ~nil~ にセットし，
~lsp-ui-sideline-mode~ を無効化します．

大きいプロジェクトを開くと flycheck が重くなるという話もあるので場合によっては flymake を使うほうが良いかもしれません．

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp)
    :custom
    (lsp-prefer-flymake nil "Use `flycheck'."))

  (use-package company-lsp
    :demand t
    :after (company)
    :config
    (push 'company-lsp company-backends))

  (use-package lsp-ui
    :commands (lsp-ui-mode)
    :hook (lsp-mode . lsp-ui-mode)
    :bind (:map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references))
    :custom
    (lsp-ui-sideline-enable nil "Disable `lsp-ui-sideline-mode'.")
    :blackout t)
#+end_src

* Documents
** Org-mode
[[https://orgmode.org/][Org-mode]] の設定を行います．
前の方で ~(straight-use-package 'org)~ しているので ~use-feature~ マクロを用います．
Org-mode でのマークアップのため，electric pair の設定を適当に変更します．
また， ~electric-pair-mode~ により ~>~ が自動挿入されるのを禁止しています．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  ;;; for Org-mode: integrate with electric-pair-mode
  (defvar my-org-electric-pair-pairs
    '((?~ . ?~) (?= . ?=)))

  (defun my-org-electric-pair-inhibit (char)
    "Do not insert close `>'."
    (if (char-equal char ?<)
        t
      (electric-pair-default-inhibit char)))
  (defun my-org-electric-pair-mode ()
    "Use Org-mode with electric-pair-mode."
    (electric-pair-mode +1)
    (setq-local electric-pair-pairs (append electric-pair-pairs
                                            my-org-electric-pair-pairs))
    (setq-local electric-pair-text-pairs (append electric-pair-text-pairs
                                                 my-org-electric-pair-pairs))
    (setq-local electric-pair-inhibit-predicate #'my-org-electric-pair-inhibit))
#+end_src

HTML へのエクスポート時に CSS を分離するように ~org-html-htmlize-output-type~ を変更します．
Org-mode 9.2 より easy templete の代わりに =org-insert-structure-templete= (~C-c C-,~) を使うようになったようです．
easy templete を利用するには =(require 'org-temp)= する必要があります．

#+begin_src emacs-lisp
  (use-feature org
    :functions (my-org-electric-pair-mode)
    :hook (org-mode . my-org-electric-pair-mode)
    :custom
    (org-startup-indented t)
    (org-fontify-natively t)
    (org-html-htmlize-output-type 'css)
    :config
    (setq org-structure-template-alist (append '(("el" . "src emacs-lisp"))
                                               org-structure-template-alist)))
#+end_src

[[https://github.com/sabof/org-bullets][org-bullets]] で見た目を変更します．

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

Github Flavored Markdown へのエクスポートのため [[https://github.com/larstvei/ox-gfm][ox-gfm]] をインストールします．

#+begin_src emacs-lisp
  (use-package ox-gfm
    :demand t
    :after (ox))
#+end_src

HTML へのエクスポートの際，コードハイライトに [[https://github.com/hniksic/emacs-htmlize][htmlize]] を利用します．

#+begin_src emacs-lisp
  (use-package htmlize
    :demand t
    :after (ox))
#+end_src

** TeX/LaTeX
*** YaTeX
TeX/LaTeX 文書の編集には [[http://yatex.org/][YaTeX: Yet Another TeX mode for Emacs]] を利用します．
基本的な使い方は[[https://www.yatex.org/yatexref.txt][クイックヘルプ]]を参照してください．
よく使うものを抜き出すと

|---------------+---------------------------------------|
| Key           | Action                                |
|---------------+---------------------------------------|
| ~C-c C-b SPC~ | Insert \begin{%s} ... \end{%s}        |
| ~C-c C-s~     | Insert \section{%s} ... etc.          |
| ~C-c C-c~     | Change env. name (on \begin or \end)  |
| ~C-c C-k~     | Kill LaTeX command (on LaTeX command) |
| ~C-c )~       | Enclose region by ()                  |
| ~C-c ]~       | Enclose region by []                  |
| ~C-c }~       | Enclose region by {}                  |
| ~C-c C-g~     | Cursor jump                           |
|---------------+---------------------------------------|

outline-minor-mode と併用するためにいくつかの変数や関数を定義します．
これらの定義は GNU Emacs 同梱の tex-mode.el でのそれとほぼ同等です．
変数 ~ouline-promotion-headings~ は outline-magic のためのものです．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  ;;; For YaTeX: integrate with outline-minor-mode
  ;; The following code is a modification a part of `tex-mode.el'
  ;; which is bundled with GNU Emacs.
  ;; Copyright (C) 1985-1986, 1989, 1992, 1994-1999, 2001-2019 Free
  ;; Software Foundation, Inc.
  ;; Released under the GPL v3.0 or any later version.

  (defvar my-YaTeX-section-alist
    '(("part" . 0)
      ("chapter" . 1)
      ("section" . 2)
      ("subsection" . 3)
      ("subsubsection" . 4)
      ("paragraph" . 5)))

  (defvar my-YaTeX-metasection-list
    '("documentclass"
      "begin{document}" "end{document}"
      "frontmatter" "mainmatter" "appendix" "backmatter"))

  (defvar my-YaTeX-outline-regexp
    (concat (regexp-quote "\\")
            (regexp-opt (append my-YaTeX-metasection-list
                                (mapcar #'car my-YaTeX-section-alist))
                        t)))

  (defvar my-YaTeX-outline-promotion-headings
    '("\\chapter" "\\section" "\\subsection" "\\subsubsection"))

  (defun my-YaTeX-outline-level ()
    (if (looking-at my-YaTeX-outline-regexp)
        (1+ (or (cdr (assoc (match-string 1) my-YaTeX-section-alist)) -1))
      1000))

  (defun my-YaTeX-with-outline ()
    (outline-minor-mode 1)
    (setq-local outline-regexp my-YaTeX-outline-regexp)
    (setq-local outline-level #'my-YaTeX-outline-level)
    (setq-local outline-promotion-headings my-YaTeX-outline-promotion-headings))
#+end_src

YaTeX の読み込み前に ~YaTeX-inhibit-prefix-letter~ を t に設定することで，
YaTeX のプレフィックスキーを ~C-c C-英字~ に変更します．
TeX 文書でのエンコーディングには UTF-8 を利用します．
また，コンパイルには [[https://ctan.org/pkg/latexmk][Latexmk]] を使用します．
ユーザ補完辞書は ~~/texmf/emacs/yatexrc~ に指定します．
macOS では ~TEXMFHOME~ は ~~/Library/texmf~ のようなので適宜ホームディレクトリにシンボリックリンクを張ります．

#+begin_src emacs-lisp
  (use-package yatex
    :functions (my-YaTeX-with-outline)
    :preface
    (defvar my-YaTeX-user-completion-table
      (expand-file-name "~/texmf/emacs/yatexrc")
      "You put here your own completion table.")
    :commands (yatex-mode)
    :init
    (setq YaTeX-inhibit-prefix-letter t)
    :mode (("\\.tex\\'" . yatex-mode)
           ("\\.sty\\'" . yatex-mode)
           ("\\.ltx\\'" . yatex-mode))
    :hook (yatex-mode . my-YaTeX-with-outline)
    :config
    (setq YaTeX-kanji-code 4)		; use UTF-8
    (setq YaTeX-use-AMS-LaTeX t)
    (setq tex-command "latexmk")
    (setq YaTeX-user-completion-table my-YaTeX-user-completion-table)
    (add-hook 'align-load-hook
              #'(lambda ()
                  (add-to-list 'align-rules-list '(yatex-table
                                                   (regexp . "\\(\\s-*\\)&")
                                                   (repeat . t)
                                                   (mode . '(yatex-mode))))))
    )
#+end_src

イメージ数式補完の他に [[https://github.com/vspinu/company-math][company-math]] による補完を利用します．

#+begin_src emacs-lisp
  (use-package company-math
    :demand t
    :after (company yatex)
    :config
    (push 'company-math-symbols-latex company-backends)
    (push 'company-latex-commands company-backends))
#+end_src

文法チェッカである chktex や lacheck を flycheck を通して利用できるようにします．

#+begin_src emacs-lisp
  (use-package flycheck-yatex
    :straight (:host github :repo "mahito1594/flycheck-yatex")
    :demand t
    :after (flycheck yatex))
#+end_src

*** RefTeX
参考文献や相互参照のために [[https://www.gnu.org/software/auctex/reftex.html][RefTeX]] を利用します．
YaTeX の =YaTeX-insert-paren-region= と併用するために ~C-c )~ を nil にバインドします．

|---------+------------------------|
| Key     | Action                 |
|---------+------------------------|
| ~C-c =~ | Show table of contents |
| ~C-c (~ | Insert \ref            |
| ~C-c [~ | Insert \cite           |
|---------+------------------------|

相互参照に [[https://ctan.org/pkg/cleveref][cleveref]] を利用するには次の 2 通りの方法があります．

1. 関数 =reftex-cleveref-cref= を利用する．
2. カスタム変数 =reftex-ref-style-default-list= を =("Cleveref")= に変更する．

#+begin_src emacs-lisp
  (use-feature reftex
    :hook (yatex-mode . reftex-mode)
    :bind (:map reftex-mode-map
                ("C-c )" . nil)
                ("C-c (" . reftex-reference)
                ("C-c {" . reftex-cleveref-cref))
    :custom
    (reftex-ref-style-default-list '("Cleveref"))
    (reftex-label-alist '((nil ?e nil "~\\ref{%s}" nil nil) ; omit parens surrounding eq-like reference
                          ("definition"  ?d "def:"  "~\\ref{%s}" nil ("definiton")   nil)
                          ("proposition" ?p "prop:" "~\\ref{%s}" nil ("proposition") nil)
                          ("theorem"     ?p "thm:"  "~\\ref{%s}" nil ("theorem")     nil)
                          ("lemma"       ?p "lem:"  "~\\ref{%s}" nil ("lemma")       nil)
                          ("corollary"   ?p "cor:"  "~\\ref{%s}" nil ("corollary")   nil)
                          ("remark"      ?r "rem:"  "~\\ref{%s}" nil ("remark")      nil)
                          ("example"     ?x "ex:"   "~\\ref{%s}" nil ("example")     nil)
                          ("conjecture"  ?c "conj:" "~\\ref{%s}" nil ("conjecture")  nil)))
    (reftex-bibpath-environment-varibales '("!kpsewhich -show-path=.bib"))
    (reftex-bibliography-commands '("bibliography"
                                    "nobibliography"
                                    "addbibresource")))
#+end_src

*** BibTeX
BibTeX データベースの簡単な編集，および後述の Ebib が利用する設定を記述します．

特に citation key を ~<第一著者の姓><出版年>:<論文タイトルの最初の1語>~ の形に自動作成するため，
=bibtex-autokey-*= を適当に設定します．

#+begin_src emacs-lisp
  (use-feature bibtex
    :mode (("\\.bib\\'" . bibtex-mode))
    :bind (:map bibtex-mode-map
                ("C-j" . nil)
                ("C-<return>" . bibtex-next-field))
    :custom
    (bibtex-user-optional-fields '(("yomi" "Yomigana")
                                   ("MRNUMBER" "Math. Rev. Number")
                                   ("archivePrefix" "name of preprint server" "arXiv")
                                   ("eprint" "Electric Print")
                                   ("primaryClass" "Primary class used by arXiv")
                                   ("shortjournal" "Journal Abbreviation")))
    (bibtex-autokey-name-case-convert 'capitalize)
    (bibtex-autokey-titleword-case-convert 'capitalize)
    (bibtex-autokey-titleword-separator "")
    (bibtex-autokey-titleword-length nil)
    (bibtex-autokey-titlewords 1)
    (bibtex-autokey-year-length 4)
    (bibtex-autokey-year-title-separator ":")
    (bibtex-autokey-titleword-ignore '("A" "An" "On" "The" "a" "an" "on" "the"
                                       "Le" "La" "Les" "le" "la" "les"
                                       "Zur" "zur")))
#+end_src

*** Ebib
文献管理には [[https://github.com/joostkremers/ebib][Ebib]] を利用します．
基本的には ~~/texmf/bibtex/bib~ 以下の ~.bib~ ファイルに文献情報を記述していきます．
論文の PDF は ~~/BibFile~ 以下に適切に配置し，Dropbox 等で同期します．

Index buffer での基本操作は次の通りです．

|-----+-------------------------|
| Key | Action                  |
|-----+-------------------------|
| ~o~ | Open .bib file          |
| ~f~ | Open file               |
| ~u~ | Browse URL              |
| ~a~ | Add entry               |
| ~e~ | Edit entry              |
| ~E~ | Edit entry-key          |
| ~m~ | Mark current entry      |
| ~M~ | Mark all entries        |
| ~x~ | Export marked entries   |
| ~!~ | Auto-generate entry-key |
| ~s~ | Save                    |
| ~z~ | Pause                   |
| ~q~ | Quit                    |
|-----+-------------------------|

Entry buffer での基本操作は次のとおりです．

|-----+-----------------------|
| Key | Action                |
|-----+-----------------------|
| ~a~ | Add field             |
| ~e~ | Edit field            |
| ~m~ | Edit multiline buffer |
| ~d~ | Delete field          |
| ~q~ | Quit                  |
|-----+-----------------------|

PDF 閲覧のために次のような関数を定義しておきます．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  ;;; For Ebib
  (defun my-ebib-name-transform-function (key)
    "Serach file of the form
         SEARCH-DIRS/FIRST-AUTHOR/ENTRY-KEY"
    (format "%s/%s"
            (substring key (string-match "[A-Za-z]+" key) (match-end 0))
            (replace-regexp-in-string ":" "" key)))
#+end_src

#+begin_src emacs-lisp
  (use-package ebib
    :functions (my-ebib-name-transform-function)
    :preface
    (defvar my-ebib-keywords-file (expand-file-name "~/texmf/emacs/ebib-keywords.txt")
      "You put here `ebib-keywords.txt'.")
    :commands (ebib)
    :bind (:map ebib-multiline-mode-map
                ("C-c C-c" . ebib-quit-multiline-buffer-and-save))
    :custom
    (ebib-bitex-dialect 'BibTeX)
    ;; Preload database
    (ebib-preload-bib-files '("~/texmf/bibtex/bib/articles.bib"
                              "~/texmf/bibtex/bib/books.bib"
                              "~/texmf/bibtex/bib/others.bib"))
    ;; Extra fields
    (ebib-extra-fields '((BibTeX "crossref"
                                 "annote"
                                 "keywords"
                                 "doi"
                                 "shortjournal"
                                 "archivePrefix" "eprint" "primaryClass"
                                 "MRCLASS" "MRNUMBER"
                                 "file")
                         (biblatex "crossref"
                                   "annotation"
                                   "keywords"
                                   "shortjournal"
                                   "archivePrefix" "primaryClass"
                                   "MRCLASS" "MRNUMBER"
                                   "file")))
    ;; Files
    (ebib-file-search-dirs '("~/BibFile/Papers"
                             "~/BibFile/Books"
                             "~/BibFile/Proceedings"))
    (ebib-name-transform-function #'my-ebib-name-transform-function)
    (ebib-file-associations (cond ((eq system-type 'darwin) '(("pdf" . "open") ("ps" . "open")))
                                  (t '(("pdf" . "xpdf") ("ps" . "gv")))))
    ;; Keywords
    (ebib-keywords-use-only-file t)
    (ebib-keywords-field-keep-sorted t)
    (ebib-keywords-file-save-on-exit 'always)
    (ebib-keywords-file my-ebib-keywords-file))
#+end_src

** Markdown

* Programming Languages
** C/C++
Language Server として [[https://github.com/MaskRay/ccls][ccls]] を利用します．
ccls のインストール方法については [[https://github.com/MaskRay/ccls/wiki/Build][Wiki/Build]] を参照してください．

macOS の場合は homebrew からインストールできます．

#+begin_src sh :tangle no
  brew tap twlz0ne/homebrew-ccls
  brew install ccls
#+end_src

#+begin_src emacs-lisp
  (use-package ccls
    :hook ((c-mode c++-mode objc-mode) . (lambda ()
                                           (require 'ccls)
                                           (lsp)))
    :config
    (setq ccls-sem-highlight-method 'font-lock)
    (ccls-use-default-rainbow-sem-highlight))

  (use-package modern-cpp-font-lock
    :commands (modern-c++-font-lock-mode)
    :hook (c++-mode-hook . modern-c++-font-lock-mode)
    :blackout t)
#+end_src

** Emacs Lisp

** Ocaml

** Python
Emacs 同梱の ~python.el~ を利用します．
~python-mode.el~ ではないことに注意してください．

~python3~ がインストールされている場合， ~python2~ ではなく ~python3~ を使うようにします．
またインデントには空白 4 文字を用いるようにします．

LSP ([[https://github.com/palantir/python-language-server][pyls]]) を利用して補完・文法チェックを行います．
インストールは

#+begin_src sh :tangle no
  ~$ pip install 'python-language-server[all]'
#+end_src

とします．

#+begin_src emacs-lisp
  (use-feature python
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :hook (python-mode . (lambda ()
                           (lsp)
                           (setq-local indent-tabs-mode nil)
                           (setq-local tab-width 4)))
    :config
    (when (executable-find "python3")
      ;; use python3 if it exists
      (setq python-shell-interpreter "python3")))
#+end_src

* Appearance
** Color theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] の ~doom-dracula~ テーマを利用します．

#+begin_src emacs-lisp
  (use-package doom-themes
    :demand t
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    (doom-neotree-file-icons t)
    :config
    (load-theme 'doom-dracula t)
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-org-config))
#+end_src

またモードラインを [[https://github.com/seagle0128/doom-modeline][doom-modeline]] でカスタマイズします．

#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-buffer-file-name-style 'truncate-upto-project)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-color-icon t)
    (find-file-visit-truename t)
    :config
    (setq doom-modeline-mu4e nil)
    (setq doom-modeline-irc nil))
#+end_src

** Frame
ツールバー等，特に必要のないものは表示しないようにします．

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (size-indication-mode +1)
  (setq frame-title-format "%f")
#+end_src

Emacs 26 以上を使用している場合 ~display-line-numbers-mode~ を利用します．

#+begin_src emacs-lisp
  (when (version<= "26.0.50" emacs-version)
    (add-hook 'after-init-hook #'global-display-line-numbers-mode))
#+end_src

Emacs 起動時にフレームを最大化します．

#+begin_src emacs-lisp
  (set-frame-parameter nil 'fullscreen 'maximized)
#+end_src

** Font
フォントに関しては，次のように記述した ~.el~ ファイルを ~local/~ 以下に配置します．

#+begin_src emacs-lisp :tangle no
  (set-face-attribute 'default nil
                      :family "Source Han Code JP"
                      :height 140)
#+end_src
* Global keybindings
global-map のキーバインドを次のように変更します．

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-m") 'newline-and-indent)
  (define-key global-map (kbd "C-2") 'set-mark-command)
  (define-key global-map (kbd "C-t") 'other-window)
  (define-key global-map (kbd "C-;") 'comment-line)
#+end_src

また ~C-h~ を ~DEL~ と入れ替えます．
=help-for-help= は ~C-x ?~ にバインドします．

#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "C-h") (kbd "DEL"))
  (define-key global-map (kbd "C-x ?") 'help-for-help)
#+end_src
* Local configuration
~.emacs.d/local~ 以下にマシン・環境ごとの設定を記述した ~.el~ ファイルを配置します．
~my-load-local-config-files~ は ~.el~ ファイルを辞書式順序で読み込みます．
バイトコンパイルした同名の ~.elc~ ファイルがあると，そちらを優先して読み込みます．
ただし ~.elc~ ファイルはあるが ~.el~ ファイルがない場合，その ~.elc~ ファイルは *読み込まれません* ．
シンボリックリンクがある場合，読み込みが失敗するかもしれません．

#+begin_src emacs-lisp
  (my-load-config-files ".*" my-local-config-directory)
#+end_src

~init-loader.el~ のように数字 2 桁のプレフィックスをつけたファイルに限定したい場合，
次のように定義すれば良いと思います (未検証)．

#+begin_src emacs-lisp :tangle no
  (defvar my-local-config-default-regexp "\\(?:\\`[[:digit:]]\\{2\\}\\)"
    "Regular expression determining valid configuration file names.")

  (my-load-config-files my-local-config-default-regexp my-local-config-directory)
#+end_src

* License
本設定ファイルは [[https://www.gnu.org/licenses/gpl.html][GNU 一般公衆ライセンス]] (バージョン 3 または以降の任意のバージョン) で公開しています．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (provide 'utility)
  ;;; utility.el ends here
#+end_src

#+begin_src emacs-lisp
  (provide 'my-init)
  ;;; my-init.el ends here
#+end_src

# Local Variables:
# org-babel-default-header-args: ((:session . "none")
#                                 (:results . "replace")
#                                 (:exports . "code")
#                                 (:cache . "no")
#                                 (:noweb . "no")
#                                 (:hlines . "no")
#                                 (:tangle . "./elisp/my-init.el"))
# End:

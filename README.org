#+STARTUP: indent
#+TITLE: My configuration file for Emacs
#+AUTHOR: Mahito TANNO
#+DATE:
#+OPTIONS: H:2

* Quick start
#+begin_src sh :tangle no
  $ git clone --recursive https://github.com/mahito1594/dotemacs.git ~/.emacs.d
#+end_src

あるいは

#+begin_src sh :tangle no
  $ git clone https://github.com/mahito1594/dotemacs.git ~/.emacs.d
  $ cd ~/.emacs.d
  $ git submodule init
  $ git submodule update
#+end_src

とします．
初回起動時のパッケージインストールに時間がかかりすぎるという場合は
version lock file (~straight/versions/default.el~) を削除してから Emacs を起動してください．
shallow clone でパッケージをダウンロードします．

* Introduction
** init.el
~init.el~ は ~elisp~ を =load-path= に追加し， ~utility.el~ と ~my-init.el~ を読み込みます．
ただし Emacs のバージョンが古い場合はこれらは読み込まれません．

また Customize で設定したカスタム変数は ~.emacs.d/local-conf.el~ に保存されます．
ローカルに設定したい事柄は ~.emacs.d/local-conf.el~ に記述します．
これらは Git によって追跡されません．

起動時にガベージコレクタが走らないように閾値を下げます．
ただし，起動後には元々の値に戻すようにします．

** my-init.el
~my-init.el~ に個人的な Emacs の設定をまとめてあります．
Emacs バージョン 25.4 以降での利用を想定しています．
特にバージョン 26 以降での利用を強く勧めます．

設定を記述するにあたって，以下に強い影響を受けました．

- [[https://github.com/raxod502/radian/tree/develop/emacs][radian/emacs]] (by [[https://github.com/raxod502][raxod502]])
- [[https://github.com/seagle0128/.emacs.d][Centaur Emacs]] (by [[https://github.com/seagle0128][seagle0128]])

~my-init.el~ を編集する際は ~README.org~ を編集します．
編集後に =org-babel-tangle= を用いて ~my-init.el~ を生成します．

本設定ファイルで定義する変数や関数には ~my-~ というプレフィックスをつけることにします．

#+begin_src emacs-lisp :exports none
  ;;; my-init.el --- My configuration file for Emacs -*- lexical-binding: t -*-

  ;; Copyright (C) 2019  TANNO Mahito

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; `my-init.el' is my configuration for Emacs.  You can get details in
  ;; `README.org' or in `.emacs.d/doc/index.html' generated by Org-mode.

  ;; Do not edit this file directly.  If you want to edit `my-init.el',
  ;; you must edit `README.org' instead.

  ;;; Code:
#+end_src

** utility.el
変数・定数・関数のうち，いくつかは ~elisp/utility.el~ に抜き出します．
必要に応じてバイトコンパイルを行います．

#+begin_src emacs-lisp :exports none :tangle ./elisp/utility.el
  ;;; utility.el --- Some convenient functions for my Emacs configuration -*- lexical-binding: t -*-

  ;; Copyright (C) 2019  TANNO Mahito

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; This file is tangled from `README.org'.

  ;;; Code:
#+end_src

** site-lisp/
いくつかのパッケージは ~site-lisp/~ 以下に配置して =require= します．
~site-lisp~ に配置するのは次の通り．

- [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]

これらは git submodule で管理します．

まず ~site-lisp/~ 以下の全てのサブディレクトリを load-path に追加します．

#+begin_src emacs-lisp
  (defconst my-site-lisp-directory
    (expand-file-name "site-lisp/" user-emacs-directory)
    "We should put here packages.")

  (let ((default-directory my-site-lisp-directory))
    (add-to-list 'load-path default-directory)
    (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
        (normal-top-level-add-subdirs-to-load-path)))
#+end_src

ログインシェルの環境変数を引き継ぎます．
変数 ~exec-path-from-shell-arguments~ から ~"-i"~ を取り除くと処理が早くなるようです．
Issue [[https://github.com/purcell/exec-path-from-shell/issues/36][#36]] [[https://github.com/purcell/exec-path-from-shell/issues/50][#50]] [[https://github.com/purcell/exec-path-from-shell/issues/75][#75]] を参照してください．

#+begin_src emacs-lisp
  (when (memq window-system '(mac ns x))
    (require 'exec-path-from-shell)
    (delete "-i" exec-path-from-shell-arguments) ; drop "-i" from option
    (exec-path-from-shell-initialize))
#+end_src

* Fundamental
** Variables
*** Init file and its document
#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defvar my-locate-readme (expand-file-name "README.org" user-emacs-directory)
    "Place where `README.org' should be.")

  (defvar my-locate-init (expand-file-name "elisp/my-init.el" user-emacs-directory)
    "Place where `my-init.el' should be.")

  (defvar my-locate-utility (expand-file-name "elisp/utility.el" user-emacs-directory)
    "Place where `utility.el' should be.")
#+end_src

*** Backup file
ファイルを ~.emacs.d/backups~ 以下に自動保存します．

#+begin_src emacs-lisp
  (defvar my-backup-directory (expand-file-name "backups/" user-emacs-directory)
    "We save automatically files into the directory:
  We set `backup-directory-alist' and `auto-save-file-name-transforms' to `my-backup-directory'.")
#+end_src

*** Local configuration directory
環境・マシンごとの設定を ~.emacs.d/local-conf.el~ に記述します．
詳細は [[Local configuration][Local configuration]] を参照してください．

#+begin_src emacs-lisp
  (defvar my-local-config-file (expand-file-name "local-conf.el" user-emacs-directory)
    "You put Emacs Lisp files here for local config.")
#+end_src

** Functions
*** Edit init file
~README.org~ を編集するには ~C-x C-f~ で開くか ~M-x my-edit-init~ とします．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defun my-edit-init ()
    "Open `README.org' to edit."
    (interactive)
    (find-file my-locate-readme))
#+end_src

*** Compile the configurations
~M-x my-make-config~ で ~my-init.el~, ~utility.el(c)~ を生成します．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defun my-make-config ()
    "Make `my-init.el', `utility.el' and `utility.elc'."
    (interactive)
    (with-current-buffer (find-file-noselect my-locate-readme)
      (org-babel-tangle))
    (byte-compile-file my-locate-utility))
#+end_src

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defun my-deploy-ghpage ()
    "Export \"README.org\" in order to deploy GitHub Pages
  via Travis CI."
    (let ((org-html-head
           "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">"))
      (with-current-buffer (find-file-noselect my-locate-readme)
        (org-html-export-to-html))))
#+end_src

** Package manager
パッケージマネージャとして ~straight.el~ と ~use-package.el~ を利用します

*** straight.el
[[https://github.com/raxod502/straight.el][straight.el]] は Emacs のパッケージマネージャの 1 つです．

#+begin_quote
next-generation, purely functional package manager for the Emacs hacker.
#+end_quote

~develop~ ブランチの ~straight.el~ をインストールします．

デフォルトのままでは Emacs の起動が遅くなるので ~straight-check-for-modifications~ を適当に設定しておきます．
現在のところ ~(watch-files find-when-checking)~ に設定するのがベストなようです．
そのためには Python3 と [[https://github.com/watchexec/watchexec][watchexec]] がインストールされている必要があります．
これら 2 つがインストールされていない場合は ~(check-on-save find-when-checking)~ に設定します．

また git を用いてインストールするパッケージについて [[https://github.com/raxod502/straight.el#git-backend][shallow clone]] するようにします．
ただしバージョンが固定されているパッケージについては shallow clone しません．

#+begin_src emacs-lisp
  (setq straight-repository-branch "develop") ; use the develop branch of straight.el
  (if (and (executable-find "watchexec")
           (executable-find "python3"))
      (setq straight-check-for-modifications '(watch-files find-when-checking))
    (setq straight-check-for-modifications '(check-on-save find-when-checking)))

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq straight-vc-git-default-clone-depth 1) ; shallow clone
#+end_src

*** use-package.el
[[https://github.com/jwiegley/use-package][use-package]] を用いてパッケージの設定を feature 単位で記述します．

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

keywords は次の順序で書くようにします:

- =:defines=
- =:functions=
- =:preface=
- =:if= (or =:when=)
- =:straight=
- =:load-path=
- =:commands=
- =:init=
- =:mode=
- =:interpreter=
- =:hook=
- =:hydra=
- =:bind=
- =:demand=
- =:after=
- =:custom=
- =:config=
- =:blackout= 

~:preface~ は ~:if~ 節の判定に関わらず読み込まれます．
他パッケージで定義される変数や関数を用いる場合 ~:defines~ や ~:functions~ に列挙しておくのが安全なようです．
基本的に ~straight.el~ を用いてパッケージをインストールするようにします．
また，パッケージは常に遅延ロードします．
遅延ロードをさせないときは明示的に =:demand t= を指定します．
遅延ロードの際， =:after= などのキーワードを併用する場合は注意が必要です．
[[https://jwiegley.github.io/use-package/keywords/#after]] を参照してください．

#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (setq use-package-always-defer t)
#+end_src

build-in の機能を用いるため ~use-feature~ マクロを定めます．
~use-feature~ は radian.el を参考にしました．

#+begin_src emacs-lisp
  (defmacro use-feature (name &rest args)
    "Like `use-package', but with `straight-use-package-by-default' disabled."
    (declare (indent defun))
    `(use-package ,name
       :straight nil
       ,@args))
#+end_src

** Some package
いくつかのパッケージを先にインストールします．
これは Emacs 同梱の (古い) バージョンのパッケージの読み込みを避けるためです．

*** Org-mode
2019年3月現在の ~straight.el~ ではデフォルトで最新の Org-mode をインストールすることができます．

#+begin_src emacs-lisp
  (straight-use-package 'org)
#+end_src

*** flymake
lsp-mode が flymake に依存しており，古いバージョンの flymake を読み込んでしまう恐れがあるようです．
回避策として lsp-mode を読み込む前に最新の flymake をインストールします．
詳細は [[https://github.com/raxod502/straight.el#faq][straight.el/FAQ]] か [[https://github.com/raxod502/straight.el/issues/355][straight.el/Issue#355]] を参照してください

#+begin_src emacs-lisp
  (straight-use-package 'flymake)
#+end_src

*** blackout
[[https://github.com/raxod502/blackout][blackout]] は deminish や delight のように，メジャー・マイナーモードのモードラインの表示をカスタマイズできます．

#+begin_src emacs-lisp
  (use-package blackout
    :straight (:host github :repo "raxod502/blackout")
    :demand t)
#+end_src

*** all-the-icons
いくつかのパッケージで ~all-the-icons~ のフォントを使用します．
フォントが未インストールかつ GUI で起動した場合，フォントを自動的にインストールします．

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (window-system)
    :demand t
    :config
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts t)))
#+end_src

*** Hydra
[[https://github.com/abo-abo/hydra][Hydra]] を利用してキーバインドを使いやすくします．
また [[https://gitlab.com/to1ne/use-package-hydra][use-package-hydra]] を用いて use-package のキーワードを追加します．

#+begin_src emacs-lisp
  (use-package hydra
    :demand t)

  (use-package use-package-hydra
    :demand t
    :after (hydra))
#+end_src

* Utilities
** Language, Codings
日本語かつ UTF8 を使用するようにします．

#+begin_src emacs-lisp
  (set-language-environment "Japanese")
  (prefer-coding-system 'utf-8)
#+end_src

また Linux 使用時は ~mozc~ を用いて日本語入力を行います．
別途 ~emacs-mozc-bin~ をインストールする必要があります．

#+begin_src emacs-lisp
  (use-package mozc
    :if (eq system-type 'gnu/linux)
    :demand t
    :config
    (setq default-input-method "japanese-mozc"))
#+end_src

macOS 使用時はファイル名の文字コードの問題があります．

#+begin_src emacs-lisp
  (use-feature ucs-normalize
    :if (eq system-type 'darwin)
    :demand t
    :config
    (set-file-name-coding-system 'utf-8-hfs)
    (setq locale-coding-system 'utf-8-hfs))
#+end_src

** Server
Emacs 起動後に =server-start= します．

#+begin_src emacs-lisp
(use-feature server
  :hook (after-init . server-mode))
#+end_src

** Restart
=M-x restart-emacs= で Emacs を再起動できるようにします．

#+begin_src emacs-lisp
  (use-package restart-emacs
    :commands (restart-emacs))
#+end_src

また [[https://github.com/jschaf/esup][esup]] を用いて Emacs 起動時間等の計測ができます．

#+begin_src emacs-lisp
  (use-package esup
    :commands (esup))
#+end_src

** Backup files
自動バックアップとオートセーブファイルを ~.emacs.d/backups~ に集めます．
~.emacs.d/backups~ は変数 =my-backup-directory= で変更できます．

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,my-backup-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,my-backup-directory t)))
  (setq auto-save-list-file-prefix
        (concat my-backup-directory
                "/.saves-"))
#+end_src

** Directories
*** dired
~.~ を押下することで Hydra を用いた ~dired-mode~ の操作をできるようにします．

#+begin_src emacs-lisp
  (use-feature dired
    :custom
    (dired-recursive-copies 'always)
    :config
    (put 'dired-find-alternate-file 'disabled nil))

  (use-feature dired-x
    :hydra
    (hydra-dired
     (:hint nil)
     "
  ^Navigate^          ^Edit^            ^Mark^               ^Command^           ^Misc^
  ^^^^^^^^^^-----------------------------------------------------------------------------------------
  _n_: next           _+_: mkdir        _m_: mark            _Z_: compress file  _(_: details
  _p_: previous       _C_: copy         _u_: unmark          ^ ^                 _)_: hide some files
  _J_: up directory   _R_: rename       _U_: unmark all      ^ ^                 _g_: refresh
  ^ ^                 _D_: delete       _t_: toggle marks    _M_: chmod
  _f_: open file      ^ ^               _E_: extension mark  _G_: chgrp          _q_: quit window
  _v_: view file      _Y_: rel symlink  _F_: find marked     _O_: chown
  _a_: open in        _S_: symlink
  ^ ^    current buf  ^ ^               ^ ^                  _!_: shell command  _._: toggle Hydra
  "
     ;; Navigate
     ("n" dired-next-line)
     ("p" dired-previous-line)
     ("g" revert-buffer)
     ("J" dired-up-directory)
     ("f" dired-find-file)
     ("v" dired-view-file)
     ("a" dired-find-alternate-file)
     ;; Edit
     ("+" dired-create-directory)
     ("C" dired-do-copy)
     ("R" dired-do-rename)
     ("D" dired-do-delete)
     ("Y" dired-do-relsymlink)
     ("S" dired-do-symlink)
     ;; Mark
     ("m" dired-mark)
     ("u" dired-unmark)
     ("U" dired-unmark-all-marks)
     ("t" dired-toggle-marks)
     ("E" dired-mark-extension)
     ("F" dired-do-find-marked-files)
     ("Z" dired-do-compress)
     ("M" dired-do-chmod)
     ("G" dired-do-chgrp)
     ("O" dired-do-chown)
     ("!" dired-do-shell-command)
     ;; Misc
     ("(" dired-hide-details-mode)
     (")" dired-omit-mode)
     ("g" revert-buffer)
     ("q" quit-window)
     ("." nil))
    :bind (:map dired-mode-map
                ("." . hydra-dired/body))
    :demand t
    :after (dired)
    :custom
    (dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\..+$"))
#+end_src

~dired-mode~ の際，ファイルのアイコンを表示するようにします．

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :if (window-system)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** neotree
ツリープラグインとして [[https://github.com/jaypei/emacs-neotree][neotree]] を用います．
~C-c t~ で起動します．
GUI での使用の際，all-the-icons を用いてアイコンを表示するようにします．

#+begin_src emacs-lisp
  (use-package neotree
    :bind (("C-c t" . neotree-toggle))
    :custom
    (neo-theme (if (display-graphic-p)
                   'classic
                 'arrow)))
#+end_src

** Candidates
*** Ivy, Counsel and swiper
補完インターフェイスとして [[https://github.com/abo-abo/swiper][Ivy/Counsel]] を利用します．
詳しい使い方は[[https://oremacs.com/swiper/][ユーザマニュアル]]を参照してください．

#+begin_src emacs-lisp
  (use-package counsel
    :hook ((after-init . ivy-mode)
           (ivy-mode . counsel-mode))
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-S-s" . swiper-all)
           ("C-c C-r" . ivy-resume)
           :map ivy-minibuffer-map
           ("<tab>" . ivy-alt-done)
           ("C-w" . ivy-yank-word))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    (ivy-wrap t)
    (ivy-format-function 'ivy-format-function-arrow)
    (counsel-yank-pop-separator "\n<--------->\n")
    (ivy-initial-inputs-alist nil)
    :blackout t)
#+end_src

ivy-hydra を利用して minibuffer での操作性を向上させます．

#+begin_src emacs-lisp
  (use-package ivy-hydra
    :bind (:map ivy-minibuffer-map
                ("C-o" . hydra-ivy/body)))
#+end_src

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] を用いてバッファ切り替えの際などにアイコンを表示するようにします．
関数 =my-ivy-rich-buffer-icon=, =my-ivy-rich-file-icon= を定義し，バッファ切替時等にアイコンを表示するようにします．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  ;;; for ivy-rich: show icons
  (defun my-ivy-rich-buffer-icon (candidate)
    "Show buffer isons in `ivy-rich', only on GUI."
    (when (display-graphic-p)
      (with-current-buffer
          (get-buffer candidate)
        (let ((icon (all-the-icons-icon-for-mode major-mode)))
          (if (symbolp icon)
              (all-the-icons-icon-for-mode 'fundamental-mode)
            icon)))))

  (defun my-ivy-rich-file-icon (candidate)
    "Show file icons in `ivy-rich', only on GUI."
    (when (display-graphic-p)
      (let ((icon
             ;; for directories
             (if (file-directory-p candidate)
                 (cond
                  ;; for `tramp-mode'
                  ((and (fboundp 'tramp-tramp-file-p)
                        (tramp-tramp-file-p default-directory))
                   (all-the-icons-octicon "file-directory"))
                  ;; for symbolic links
                  ((file-symlink-p candidate)
                   (all-the-icons-octicon "file-symlink-directory"))
                  ;; for git submodules
                  ((all-the-icons-dir-is-submodule candidate)
                   (all-the-icons-octicon "file-submodule"))
                  ;; for version-controled by git
                  ((file-exists-p (format "%s/.git" candidate))
                   (all-the-icons-octicon "repo"))
                  ;; otherwise
                  (t (let ((matcher (all-the-icons-match-to-alist candidate all-the-icons-dir-icon-alist)))
                       (apply (car matcher) (list (cadr matcher))))))
               ;; for files
               (all-the-icons-icon-for-file candidate))))
        (unless (symbolp icon)
          (propertize icon
                      'face `(:family ,(all-the-icons-icon-family icon) :height 1.1))))))
#+end_src

#+begin_src emacs-lisp
  (use-package ivy-rich
    :functions (my-ivy-rich-buffer-icon my-ivy-rich-file-icon)
    :hook (ivy-mode . ivy-rich-mode)
    :custom
    (ivy-rich-path-style 'abbrev)
    (ivy-rich-display-transformers-list
     '(ivy-switch-buffer
       (:columns
        ((my-ivy-rich-buffer-icon :width 2)
         (ivy-rich-candidate (:width 30))
         (ivy-rich-switch-buffer-size (:width 7))
         (ivy-rich-switch-buffer-indicators (:width 4 :face error :align left))
         (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
         (ivy-rich-switch-buffer-project (:width 15 :face success))
         (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
        :predicate
        (lambda (cand) (get-buffer cand)))
       counsel-M-x
       (:columns
        ((counsel-M-x-transformer (:width 40))
         (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
       counsel-describe-function
       (:columns
        ((counsel-describe-function-transformer (:width 40))
         (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
       counsel-describe-variable
       (:columns
        ((counsel-describe-variable-transformer (:width 40))
         (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
       counsel-recentf
       (:columns
        ((ivy-rich-candidate (:width 0.8))
         (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))
       counsel-find-file
       (:columns
        ((my-ivy-rich-file-icon :width 2)
         (ivy-rich-candidate)))
       counsel-git
       (:columns
        ((my-ivy-rich-file-icon :width 2)
         (ivy-rich-candidate)))))
    :blackout t)
#+end_src

[[https://github.com/DarwinAwardWinner/amx][amx]] を用いて ~M-x~ を ivy と統合します．

#+begin_src emacs-lisp
  (use-package amx
    :hook (ivy-mode . amx-mode))
#+end_src

*** emacs-which-key
[[https://github.com/justbur/emacs-which-key][which-key]] を用いてキーバインドを表示させます．

#+begin_src emacs-lisp
  (use-package which-key
    :hook (after-init . which-key-mode)
    :bind (:map which-key-mode-map
                ("C-x DEL" . which-key-C-h-dispatch)
                ("C-c DEL" . which-key-C-h-dispatch))
    :custom
    (which-key-popup-type 'side-window)
    (which-key-side-window-location 'bottom)
    :blackout t)
#+end_src

** Navigation
=C-v= で =hydra-navi= による移動ができるようになります．

#+begin_src emacs-lisp
  (defhydra hydra-navi
    (:hint nil)
    "
  ^Navigate^              ^ ^                 ^Action
  ^^^^^^-----------------------------------------------------------
  _f_: foward char        _n_: next line      _s_: search
  _F_: foward word        _p_: previous line  _r_: replace
  _b_: backward char      _v_: scroll down
  _B_: backward word      _V_: scroll up      _k_: kill buffer
  _a_: beginning of line  ^ ^
  _e_: end of line        ^ ^                 _x_: execute command
  "
    ("n" next-line)
    ("p" previous-line)
    ("f" forward-char)
    ("F" forward-word)
    ("b" backward-char)
    ("B" backward-word)
    ("a" beginning-of-line)
    ("e" move-end-of-line)
    ("v" scroll-up-command)
    ("V" scroll-down-command)
    ("s" swiper)
    ("r" query-replace)
    ("x" counsel-M-x)
    ("k" kill-buffer)
    ("q" nil "quit"))
#+end_src

** Others
*** Parenthesis
対応する括弧類は自動的に挿入し，また強調するようにします．

#+begin_src emacs-lisp
  (use-feature elec-pair
    :hook (after-init . electric-pair-mode))

  (use-feature paren
    :hook (after-init . show-paren-mode)
    :custom
    (show-paren-style 'mixed))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Whitespace
基本的に，インデントにはタブ文字ではなく空白文字を利用します．

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

~C-c w~ で空白文字を可視化します．

#+begin_src emacs-lisp
  (use-feature whitespace
    :commands (whitespace-mode)
    :bind (("C-c w" . whitespace-mode))
    :custom
    (whitespace-style '(
                        face
                        trailing
                        tabs
                        spaces
                        empty
                        space-mark
                        tab-mark
                        ))
    :blackout t)
#+end_src

*** Cursor
[[https://github.com/Malabarba/beacon][beacon]] を用いてカーソルを目立たせます．

#+begin_src emacs-lisp
  (use-package beacon
    :hook (after-init . beacon-mode)
    :custom
    (beacon-color "yellow"))
#+end_src

*** Region
選択中のリージョンをハイライトします．

#+begin_src emacs-lisp
  (add-hook 'after-init-hook #'transient-mark-mode)
#+end_src

*** Ring bell
エラー時のベル音を消します．

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

* Completion and syntax checking
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :blackout t)
#+end_src

** Company
補完には [[https://github.com/company-mode/company-mode][company-mode]] を用います．
各種設定は [[https://github.com/company-mode/company-mode/wiki/Switching-from-AC][Switching from AC]] を参考にしました．
=:bind= キーワードを使うとうまく読み込まないため， =:config= と =define-key= を利用しています

#+begin_src emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :config
    (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
    (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (setq company-idle-delay 0)
    (setq company-selection-wrap-around t)
    (setq company-require-match 'never)
    :blackout t)
#+end_src

[[https://github.com/expez/company-quickhelp][company-quickhelp]] を用いて補完候補のドキュメントを読めるようにしておきます．

#+begin_src emacs-lisp
  (use-package company-quickhelp
    :if (window-system)
    :hook (company-mode . company-quickhelp-mode))
#+end_src

[[https://github.com/sebastiencs/company-box][company-box]] を用いて補完候補にアイコンを表示します．
デフォルトの設定のままだと，アイコンが大きく感じるので適当に調整をします．

#+begin_src emacs-lisp
  (use-package company-box
    :functions (all-the-icons-faicon all-the-icons-octicon all-the-icons-material all-the-icons-alltheicon)
    :if (and (window-system)
             (>= emacs-major-version 26))
    :init
    (defvar my-company-box-icons-all-the-icons
      `((Unknown       . ,(all-the-icons-faicon     "cog"                      :height 0.9))
        (Text          . ,(all-the-icons-octicon    "file-text"                :height 0.9))
        (Method        . ,(all-the-icons-faicon     "cube"                     :height 0.9))
        (Function      . ,(all-the-icons-faicon     "cube"                     :height 0.9))
        (Constructor   . ,(all-the-icons-faicon     "cube"                     :height 0.9))
        (Field         . ,(all-the-icons-faicon     "cog"                      :height 0.9))
        (Variable      . ,(all-the-icons-faicon     "cog"                      :height 0.9))
        (Class         . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
        (Interface     . ,(all-the-icons-material   "share"                    :height 0.9))
        (Module        . ,(all-the-icons-alltheicon "less"                     :height 0.9))
        (Property      . ,(all-the-icons-faicon     "wrench"                   :height 0.9))
        (Unit          . ,(all-the-icons-material   "settings_system_daydream" :height 0.9))
        (Value         . ,(all-the-icons-material   "format_align_right"       :height 0.9))
        (Enum          . ,(all-the-icons-material   "content_copy"             :height 0.9))
        (Keyword       . ,(all-the-icons-material   "filter_center_focus"      :height 0.9))
        (Snippet       . ,(all-the-icons-material   "content_paste"            :height 0.9))
        (Color         . ,(all-the-icons-material   "palette"                  :height 0.9))
        (File          . ,(all-the-icons-faicon     "file"                     :height 0.9))
        (Reference     . ,(all-the-icons-material   "collections_bookmark"     :height 0.9))
        (Folder        . ,(all-the-icons-faicon     "folder"                   :height 0.9))
        (EnumMember    . ,(all-the-icons-material   "format_align_right"       :height 0.9))
        (Constant      . ,(all-the-icons-faicon     "square-o"                 :height 0.9))
        (Struct        . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
        (Event         . ,(all-the-icons-faicon     "bolt"                     :height 0.9))
        (Operator      . ,(all-the-icons-material   "control_point"            :height 0.9))
        (TypeParameter . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
        (Template      . ,(all-the-icons-material   "format_align_center"      :height 0.9))
        ))
    :hook (company-mode . company-box-mode)
    :custom
    (company-box-show-single-candidate t)
    (company-box-max-candidates 50)
    :config
    (setq company-box-backends-colors nil)
    (setq company-box-icons-alist 'my-company-box-icons-all-the-icons)
    :blackout t)
#+end_src

** Flycheck
文法チェックには [[https://www.flycheck.org/en/latest/][Flycheck]] を利用します．
後述の [[LSP][LSP]] を用いる場合には暴走するという情報があるので要確認です．

#+begin_src emacs-lisp
  (use-package flycheck
    :commands (flycheck-disable-checker)
    :hook (after-init . global-flycheck-mode)
    :custom
    (flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+end_src

エラー内容の表示に [[https://github.com/flycheck/flycheck-popup-tip][flycheck-popup-tip]] を利用します．

#+begin_src emacs-lisp
  (use-package flycheck-popup-tip
    :hook (flycheck-mode . flycheck-popup-tip-mode))
#+end_src

** LSP
いくつかの言語では Language Server Protocol を用いて補完・文法チェックを行います．
詳細は各言語の設定を参照してください．

ここでは [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] を利用します．
補完には [[https://github.com/tigersoldier/company-lsp][company-lsp]] を，文法チェックには [[https://github.com/emacs-lsp/lsp-ui][lsp-ui/flycheck]] を利用します．

lsp-mode と flycheck を併用するにはカスタム変数 ~lsp-prefer-flymake~ を ~nil~ にセットします．
また flycheck-popup-tip を使用していると画面がうるさくなるのでカスタム変数 ~lsp-ui-sideline-enable~ を ~nil~ にセットし，
~lsp-ui-sideline-mode~ を無効化します．

大きいプロジェクトを開くと flycheck が重くなるという話もあるので場合によっては flymake を使うほうが良いかもしれません．

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp)
    :custom
    (lsp-prefer-flymake nil "Use `flycheck'."))

  (use-package company-lsp
    :demand t
    :after (company)
    :config
    (push 'company-lsp company-backends))

  (use-package lsp-ui
    :commands (lsp-ui-mode)
    :hook (lsp-mode . lsp-ui-mode)
    :bind (:map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references))
    :custom
    (lsp-ui-sideline-enable nil "Disable `lsp-ui-sideline-mode'.")
    :blackout t)
#+end_src

* Documents
** Org-mode
[[https://orgmode.org/][Org-mode]] の設定を行います．
前の方で ~(straight-use-package 'org)~ しているので ~use-feature~ マクロを用います．
Org-mode でのマークアップのため，electric pair の設定を適当に変更します．
また， ~electric-pair-mode~ により ~>~ が自動挿入されるのを禁止しています．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  ;;; for Org-mode: integrate with electric-pair-mode
  (defvar my-org-electric-pair-pairs
    '((?~ . ?~) (?= . ?=)))

  (defun my-org-electric-pair-inhibit (char)
    "Do not insert close `>'."
    (if (char-equal char ?<)
        t
      (electric-pair-default-inhibit char)))
  (defun my-org-electric-pair-mode ()
    "Use Org-mode with electric-pair-mode."
    (electric-pair-mode +1)
    (setq-local electric-pair-pairs (append electric-pair-pairs
                                            my-org-electric-pair-pairs))
    (setq-local electric-pair-text-pairs (append electric-pair-text-pairs
                                                 my-org-electric-pair-pairs))
    (setq-local electric-pair-inhibit-predicate #'my-org-electric-pair-inhibit))
#+end_src

HTML へのエクスポート時に CSS を分離するように ~org-html-htmlize-output-type~ を変更します．
Org-mode 9.2 より easy templete の代わりに =org-insert-structure-templete= (~C-c C-,~) を使うようになったようです．
easy templete を利用するには =(require 'org-temp)= する必要があります．

#+begin_src emacs-lisp
  (use-feature org
    :functions (my-org-electric-pair-mode)
    :hook (org-mode . my-org-electric-pair-mode)
    :custom
    (org-startup-indented t)
    (org-fontify-natively t)
    (org-html-htmlize-output-type 'css)
    :config
    (setq org-structure-template-alist (append '(("el" . "src emacs-lisp"))
                                               org-structure-template-alist)))
#+end_src

[[https://github.com/sabof/org-bullets][org-bullets]] で見た目を変更します．

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

Github Flavored Markdown へのエクスポートのため [[https://github.com/larstvei/ox-gfm][ox-gfm]] をインストールします．

#+begin_src emacs-lisp
  (use-package ox-gfm
    :demand t
    :after (ox))
#+end_src

HTML へのエクスポートの際，コードハイライトに [[https://github.com/hniksic/emacs-htmlize][htmlize]] を利用します．

#+begin_src emacs-lisp
  (use-package htmlize
    :demand t
    :after (ox))
#+end_src

** Outline
Hydra を用いて outline-minor-mode を使いやすくします．

#+begin_src emacs-lisp
  (use-feature outline
    :hydra
    (hydra-outline
     (:hint nil)
     "
  ^Navigate^                ^Hide^         ^Show^         ^Edit^
  ^^^^^^^^^^^^----------------------------------------------------------------
  _u_: up                   _l_: leaves    _a_: all       _↑_: move up
  _n_: next visible         _t_: body      _e_: entry     _↓_: move down
  _p_: previous visible     _c_: entry     _k_: branches  _←_: promote
  _f_: forward same level   _d_: subtree   _i_: children  _→_: demote
  _b_: backward same level  _q_: sublevel  _s_: subtree
  ^ ^                       _o_: other     ^ ^            _z_: quit
  "
     ;; Navigate
     ("u" outline-up-heading)
     ("n" outline-next-visible-heading)
     ("p" outline-previous-visible-heading)
     ("f" outline-forward-same-level)
     ("b" outline-backward-same-level)
     ;; Hide
     ("l" outline-hide-leaves)
     ("t" outline-hide-body)
     ("c" outline-hide-entry)
     ("d" outline-hide-subtree)
     ("q" outline-hide-sublevels)
     ("o" outline-hide-other)
     ;; Show
     ("a" outline-show-all)
     ("e" outline-show-entry)
     ("k" outline-show-branches)
     ("i" outline-show-children)
     ("s" outline-show-subtree)
     ;; Edit
     ("<up>" outline-move-subtree-up)
     ("<down>" outline-move-subtree-down)
     ("<left>" outline-promote)
     ("<right>" outline-demote)
     ;; quit
     ("z" nil))
    :bind (:map outline-minor-mode-map
                ("C-c #" . hydra-outline/body)))
#+end_src

** TeX/LaTeX
*** AUCTeX
TeX 文書の作成には [[https://www.gnu.org/software/auctex/][AUCTeX]] を利用します．

#+begin_src emacs-lisp
  (straight-use-package 'auctex)
#+end_src

**** Settings
AUCTeX は ~tex.el~, ~latex.el~, ~tex-buf.el~ および ~font-latex.el~ などを提供します．
変数 =TeX-parse-self= を =t= にすることで，TeX 文書内を解析して用いているパッケージを調べます．
変数 =TeX-electric-sub-and-superscript= を =t= にすることで =^= または =_= を入力後に自動的に ={...}= が挿入されます．
変数 =TeX-source-correlate-mode= を =t= にすることで常に SyncTeX を利用するようにします．

=C-c C-c= (=TeX-command-master=) から latexmk を呼べるように =TeX-command-list= に追加しておきます．

#+begin_src emacs-lisp
  (use-feature tex
    :preface
    (defun my-plain-TeX-mode-hook ()
      (outline-minor-mode 1)
      (setq-local TeX-electric-math
                  (cons "$" "$")))
    :init
    (setq TeX-format-list
          '(("JLATEX" japanese-latex-mode
             "\\\\\\(documentstyle\\|documentclass\\)[^%\n]*{\\(u\\|lt\\|bx\\)?\\(j[st-]?\\|t\\)\
  \\(article\\|report\\|book\\|slides\\|lreq\\)")
            ("JTEX" japanese-plain-tex-mode
             "-- string likely in Japanese TeX --")
            ("AMSTEX" ams-tex-mode
             "\\\\document\\b")
            ("CONTEXT" context-mode
             "\\\\\\(start\\(text\\|tekst\\|proje[ck]t\\|proiect\\|\
  produ[ck]t\\|produs\\|environment\\|omgeving\\|umgebung\\|prostredi\\|mediu\\|\
  component\\|onderdeel\\|komponent[ea]\\|componenta\\)\
  \\|inizia\\(testo\\|progetto\\|prodotto\\|ambiente\\|componente\\)\
  \\)\\|%.*?interface=")
            ("LATEX" latex-mode
             "\\\\\\(begin\\|\\(?:sub\\)\\{0,2\\}section\\|chapter\\|documentstyle\\|\
  documentclass\\)\\b")
            ("TEX" plain-tex-mode ".")))
    :hook (plain-TeX-mode . my-plain-TeX-mode-hook)
    :custom
    (TeX-auto-save nil)
    (TeX-parse-self t)
    (TeX-electric-sub-and-superscript t)
    (TeX-source-correlate-mode t)
    (TeX-source-correlate-method '((dvi . synctex)
                                   (pdf . synctex)))
    :config
    (add-to-list 'TeX-command-list
                 '("LatexMk" "latexmk %t"
                   TeX-run-TeX nil
                   (latex-mode) :help "Run latexmk")))
#+end_src

LaTeX 文書を執筆する際は，インライン数式の記述に ~\(...\)~ を用います．
変数 =LaTeX-electric-left-right-brace= を =t= に設定することで， =\left= と =\right= など対応する括弧類を自動的に挿入します．
この機能は ~electric-pair-mode~ と相性が悪いので LaTeX-mode では ~electric-pair-mode~ を OFF にしておきます．

#+begin_src emacs-lisp
  (use-feature latex
    :preface
    (defun my-LaTeX-mode-hook ()
      (outline-minor-mode 1)
      (electric-pair-local-mode -1)
      (setq-local TeX-electric-math
                  (cons "\\(" "\\)")))
    :hook (LaTeX-mode . my-LaTeX-mode-hook)
    :custom
    (LaTeX-electric-left-right-brace t))
#+end_src

上付き・下付き文字の表示を plain にします．

#+begin_src emacs-lisp
  (use-feature font-latex
    :custom
    (font-latex-fontify-script nil))
#+end_src

#+begin_src emacs-lisp
  (use-feature tex-jp
    :custom
    (japanese-TeX-engine-default 'uptex)
    (japanese-LaTeX-default-style "jsarticle")
    (japanese-LaTeX-style-list
     '(("jsarticle") ("jsreport") ("jsbook")
       ;; for upLaTeX
       ("ujarticle") ("ujreport") ("ujbook")
       ("utarticle") ("utreport") ("utbook")
       ;; for LuaLaTeX
       ("ltjarticle") ("ltjreport") ("ltjbook")
       ("ltjsarticle") ("ltjsreport") ("ltjsbook")
       ;; for XeLaTeX/LuaTeX
       ("bxjsarticle") ("bxjsreport") ("bxjsbook") ("bxjsslide")
       ;; for jlreq
       ("jlreq")))
    :config
    ;; By setting `TeX-expand-list', override `TeX-expand-list-builtin'
    ;; which is modified by `tex-jp.el'.
    (setq TeX-expand-list
          (append TeX-expand-list
                  '(("%(bibtex)" (lambda ()
                                   (cond
                                    ((eq TeX-engine 'ptex)
                                     (if (executable-find "pbibtex")
                                         "pbibtex %(kanjiopt)" "jbibtex"))
                                    ((eq TeX-engine 'jtex) "jbibtex")
                                    ((and japanese-TeX-mode
                                          (memq TeX-engine '(uptex xetex luatex)))
                                     "upbibtex")
                                    (t "bibtex")))))))
    (defun my-japanese-LaTeX-guess-engine ()
      "Guess Japanese TeX engine and set it to `TeX-engine'.
  Document class and its option is considered in the guess.  Do not
  overwrite the value already set locally."
      ;; `TeX-engine' may be set by the file local variable or by the menu
      ;; Command->TeXing Options manually.  Don't override the user
      ;; preference set in such ways.
      (unless (local-variable-p 'TeX-engine (current-buffer))
        (TeX-engine-set
         (cond
          ((TeX-match-style "jlreq")
           (cond
            ((LaTeX-match-class-option "\\`platex\\'") 'ptex)
            ((LaTeX-match-class-option "\\`uplatex\\'") 'uptex)
            ((LaTeX-match-class-option "\\`lulatex\\'") 'luatex)
            (t japanese-TeX-engine-default)))
          ((TeX-match-style "\\`bxjs\\(?:article\\|report\\|book\\)\\'")
           (cond
            ((LaTeX-match-class-option "\\`platex\\'") 'ptex)
            ((LaTeX-match-class-option "\\`uplatex\\'") 'uptex)
            ((LaTeX-match-class-option "\\`lualatex\\'") 'luatex)
            ((LaTeX-match-class-option "\\`xelatex\\'") 'xetex)
            (t japanese-TeX-engine-default)))
          ((TeX-match-style "\\`ltj[st]?\\(?:article\\|report\\|book\\)\\'")
           'luatex)
          ((TeX-match-style "\\`u[jt]\\(?:article\\|report\\|book\\)\\'")
           'uptex)
          ((TeX-match-style "\\`[jt]s?\\(?:article\\|report\\|book\\)\\'")
           (if (LaTeX-match-class-option "\\`uplatex\\'")
               'uptex 'ptex))
          ((TeX-match-style "\\`j-\\(?:article\\|report\\|book\\)\\'")
           'jtex)
          (t japanese-TeX-engine-default)))))
    (advice-add 'japanese-LaTeX-guess-engine :override #'my-japanese-LaTeX-guess-engine))
#+end_src

入力補完に [[https://github.com/alexeyr/company-auctex][company-auctex]] を利用します．

#+begin_src emacs-lisp
  (use-package company-auctex
    :demand t
    :after (company tex)
    :config
    (company-auctex-init))
#+end_src

**** Insertion of Quotes, Dollars and Braces
引用符の挿入等の操作についてまとめます．

| key     | action                |
|---------+-----------------------|
| ="=     | Insert ~``~ or ~''~   |
| =$=     | Insert ~$$~ or ~\(\)~ |
| =C-c {= | Insert ~{}~           |

リージョン選択中に =$= を押下すると，選択範囲を =$...$= または =\(...\)= で囲みます．
また続けて =$= を押下することで別行立て数式・非数式・インライン数式をトグルします．
また，リージョン選択中に =C-c {= を押下することで選択範囲を ={...}= で囲みます．

**** Font specifiers
フォントに関する制御綴の挿入についてまとめます．
prefix は ~C-c C-f~ です．

| key            | action                          |
|----------------+---------------------------------|
| =[prefix] C-b= | Insert =\textbf{}=              |
| =[prefix] C-i= | Insert =\textit{}=              |
| =[prefix] C-e= | Insert =\emph{}=                |
| =[prefix] C-s= | Insert =\textsl{}=              |
| =[prefix] C-r= | Insert =\textrm{}=              |
| =[prefix] C-f= | Insert =\textsf{}=              |
| =[prefix] C-t= | Insert =\texttt{}=              |
| =[prefix] C-c= | Insert =\textsc{}=              |
| =[prefix] C-d= | Delete innermost font specifire |

LaTeX-mode 中では以下のコマンドが利用可能なように設定しています．

| key            | action             |
|----------------+--------------------|
| =[prefix] m=   | Insert =\textmc{}= |
| =[prefix] g=   | Insert =\textgt{}= |

**** Sectioning/Environment
section 型命令や環境の挿入についてまとめます．

| key       | action                         |
|-----------+--------------------------------|
| =C-c C-s= | Insert a sectioning command    |
| =C-c C-e= | Insert a environment command   |
| =C-c ]=   | Insert a suitable =\end{...}=  |
| =C-M-a=   | Move to suitable =\begin{...}= |
| =C-M-e=   | Move to suitable =\end{...}=   |

**** Math
=C-c ~= で =LaTeX-math-mode= に入ります．
~LaTeX-math-mode~ 中で =`= を押下すると数式マクロが簡単に入力できるようになります．
ユーザ辞書は =LaTeX-math-list= で設定できます．

**** Mark region/Comment and Uncomment
=C-c *= で現在いる section 全体をマークします．
同様に =C-c .= は現在いる environment 全体をマークします．

=C-c ;= は選択中のリージョンをコメントまたはアンコメントします．
また =C-c %= は現在のパラグラフをコメントまたはアンコメントします．

**** Compile
TeX 文書をコンパイルするには =C-c C-c= (=TeX-command-master=) を用います．
他にも選択中のリージョンや，現在のバッファをコンパイルするコマンドがあります．

| key       | function              | action                                                   |
|-----------+-----------------------+----------------------------------------------------------|
| =C-c C-c= | =TeX-command-master=  | Compile the master file (See the variable =TeX-master=). |
| =C-c C-r= | =TeX-command-region=  | Compile the selected region.                             |
| =C-c C-b= | =TeX-command-buffer=  | Compile the current buffer.                              |
| =C-c C-z= | =TeX-command-section= | Compile the current section.                             |
| =C-c C-a= | =TeX-command-run-all= | Compile the current document until it is finished.       |

コンパイル時のコマンドは =TeX-command-list= から選ぶことができます．
利用する (La)TeX エンジンはカスタム変数 =TeX-engine= で指定できます．
これはバッファローカル変数です．
デフォルトで用意されているエンジンは 

- default (=TeX-command=, =LaTeX-command=, =ConTeXt-engine= から決まる)
- XeTeX
- LuaTeX
- Omega

です．

たとえばデフォルトの設定で =pdflatex= を利用するには

- =TeX-PDF-mode= (=C-c C-t C-p= でトグルできます) であり，かつ変数 =TeX-PDF-from-DVI= が =nil=

の状況で =C-c C-c LaTeX= とすれば良いはずです．
また，たとえば LuaLaTeX で PDF を直接生成するためには

- 変数 =TeX-engine= を =luatex= にセットし，かつ =TeX-PDF-mode= になっている

状況で =C-c C-c LaTeX= とすれば良いはずです．
ここで =TeX-PDF-mode= バッファローカルなマイナーモードで，デフォルトで有効になっています．

カスタム変数 =TeX-engin-alist= を利用することで，エンジンの設定ができます．
=TeX-engin-alist= には次の形のリスト

#+begin_src emacs-lisp :tangle no
  (SYMBOL "ENGINE NAME" "COMMAND FOR `plain TeX'" "COMMAND FOR `latex'" "COMMAND FOR `ConTeXt'")
#+end_src

を渡します．

**** Viewing outputs
コンパイルして得られた生成物を見るには =C-c C-v= (=TeX-view=) とします．
SyncTeX を利用するには =TeX-source-correlate-mode= になっている必要があります．
これは =C-c C-t C-s= でトグルできます．
ビューアとして使われるプログラムは AUCTeX が判断します．

*** RefTeX
参考文献や相互参照のために [[https://www.gnu.org/software/auctex/reftex.html][RefTeX]] を利用します．

|---------+------------------------|
| Key     | Action                 |
|---------+------------------------|
| ~C-c =~ | Show table of contents |
| ~C-c )~ | Insert \ref            |
| ~C-c [~ | Insert \cite           |
|---------+------------------------|

相互参照に [[https://ctan.org/pkg/cleveref][cleveref]] を利用するには次の 2 通りの方法があります．

1. 関数 =reftex-cleveref-cref= を利用する．
2. カスタム変数 =reftex-ref-style-default-list= を =("Cleveref")= に変更する．

#+begin_src emacs-lisp
  (use-feature reftex
    :hook (LaTeX-mode . reftex-mode)
    ;; :bind (:map reftex-mode-map
                ;; ("C-c )" . nil)
                ;; ("C-c (" . reftex-reference)
                ;; ("C-c {" . reftex-cleveref-cref))
    :custom
    (reftex-plug-into-AUCTeX t)
    (reftex-ref-style-default-list '("Cleveref"))
    (reftex-label-alist '((nil ?e nil "~\\ref{%s}" nil nil) ; omit parens surrounding eq-like reference
                          ("definition"  ?d "def:"  "~\\ref{%s}" nil ("definiton")   nil)
                          ("proposition" ?p "prop:" "~\\ref{%s}" nil ("proposition") nil)
                          ("theorem"     ?p "thm:"  "~\\ref{%s}" nil ("theorem")     nil)
                          ("lemma"       ?p "lem:"  "~\\ref{%s}" nil ("lemma")       nil)
                          ("corollary"   ?p "cor:"  "~\\ref{%s}" nil ("corollary")   nil)
                          ("remark"      ?r "rem:"  "~\\ref{%s}" nil ("remark")      nil)
                          ("example"     ?x "ex:"   "~\\ref{%s}" nil ("example")     nil)
                          ("conjecture"  ?c "conj:" "~\\ref{%s}" nil ("conjecture")  nil)))
    (reftex-bibpath-environment-varibales '("!kpsewhich -show-path=.bib"))
    (reftex-bibliography-commands '("bibliography"
                                    "nobibliography"
                                    "addbibresource")))
#+end_src

*** BibTeX
BibTeX データベースの簡単な編集，および後述の Ebib が利用する設定を記述します．

特に citation key を ~<第一著者の姓><出版年>:<論文タイトルの最初の1語>~ の形に自動作成するため，
=bibtex-autokey-*= を適当に設定します．

#+begin_src emacs-lisp
  (use-feature bibtex
    :mode (("\\.bib\\'" . bibtex-mode))
    :bind (:map bibtex-mode-map
                ("C-j" . nil)
                ("C-<return>" . bibtex-next-field))
    :custom
    (bibtex-user-optional-fields '(("yomi" "Yomigana")
                                   ("MRNUMBER" "Math. Rev. Number")
                                   ("archivePrefix" "name of preprint server" "arXiv")
                                   ("eprint" "Electric Print")
                                   ("primaryClass" "Primary class used by arXiv")
                                   ("shortjournal" "Journal Abbreviation")))
    (bibtex-autokey-name-case-convert-function 'capitalize)
    (bibtex-autokey-titleword-case-convert-function 'capitalize)
    (bibtex-autokey-titleword-separator "")
    (bibtex-autokey-titleword-length nil)
    (bibtex-autokey-titlewords 1)
    (bibtex-autokey-year-length 4)
    (bibtex-autokey-year-title-separator ":")
    (bibtex-autokey-titleword-ignore '("A" "An" "On" "The" "a" "an" "on" "the"
                                       "Le" "La" "Les" "le" "la" "les"
                                       "Zur" "zur")))
#+end_src

*** Ebib
文献管理には [[https://github.com/joostkremers/ebib][Ebib]] を利用します．
基本的には ~~/texmf/bibtex/bib~ 以下の ~.bib~ ファイルに文献情報を記述していきます．
論文の PDF は ~~/BibFile~ 以下に適切に配置し，Dropbox 等で同期します．

Index buffer での基本操作は次の通りです．

|-----+-------------------------|
| Key | Action                  |
|-----+-------------------------|
| ~o~ | Open .bib file          |
| ~f~ | Open file               |
| ~u~ | Browse URL              |
| ~a~ | Add entry               |
| ~e~ | Edit entry              |
| ~E~ | Edit entry-key          |
| ~m~ | Mark current entry      |
| ~M~ | Mark all entries        |
| ~x~ | Export marked entries   |
| ~!~ | Auto-generate entry-key |
| ~s~ | Save                    |
| ~z~ | Pause                   |
| ~q~ | Quit                    |
|-----+-------------------------|

Entry buffer での基本操作は次のとおりです．

|-----+-----------------------|
| Key | Action                |
|-----+-----------------------|
| ~a~ | Add field             |
| ~e~ | Edit field            |
| ~m~ | Edit multiline buffer |
| ~d~ | Delete field          |
| ~q~ | Quit                  |
|-----+-----------------------|

PDF 閲覧のために次のような関数を定義しておきます．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  ;;; For Ebib
  (defun my-ebib-name-transform-function (key)
    "Serach file of the form
         SEARCH-DIRS/FIRST-AUTHOR/ENTRY-KEY"
    (format "%s/%s"
            (substring key (string-match "[A-Za-z]+" key) (match-end 0))
            (replace-regexp-in-string ":" "" key)))
#+end_src

index buffer で ~K a~ を押下することで直接 keywords を追加できます．
マークした enrtry 全てに keywords を追加することも可能です．
~RET~ では keyword の補完になるので， ~C-M-j~ (=ivy-immediate-done= ?) で編集画面から抜け出すことができます．

#+begin_src emacs-lisp
  (use-package ebib
    :functions (my-ebib-name-transform-function)
    :preface
    (defvar my-ebib-keywords-file (expand-file-name "~/texmf/emacs/ebib-keywords.txt")
      "You put here `ebib-keywords.txt'.")
    :commands (ebib)
    :bind (:map ebib-multiline-mode-map
                ("C-c C-c" . ebib-quit-multiline-buffer-and-save))
    :custom
    (ebib-bitex-dialect 'BibTeX)
    ;; Preload database
    (ebib-preload-bib-files '("~/texmf/bibtex/bib/articles.bib"
                              "~/texmf/bibtex/bib/books.bib"
                              "~/texmf/bibtex/bib/others.bib"))
    ;; Extra fields
    (ebib-extra-fields '((BibTeX "crossref"
                                 "annote"
                                 "keywords"
                                 "doi"
                                 "shortjournal"
                                 "archivePrefix" "eprint" "primaryClass"
                                 "MRCLASS" "MRNUMBER"
                                 "file")
                         (biblatex "crossref"
                                   "annotation"
                                   "keywords"
                                   "shortjournal"
                                   "archivePrefix" "primaryClass"
                                   "MRCLASS" "MRNUMBER"
                                   "file")))
    ;; Files
    (ebib-file-search-dirs '("~/BibFile/Papers"
                             "~/BibFile/Books"
                             "~/BibFile/Proceedings"))
    (ebib-name-transform-function #'my-ebib-name-transform-function)
    (ebib-file-associations (cond ((eq system-type 'darwin) '(("pdf" . "open") ("ps" . "open")))
                                  (t '(("pdf" . "xpdf") ("ps" . "gv")))))
    ;; Keywords
    (ebib-keywords-use-only-file t)
    (ebib-keywords-field-keep-sorted t)
    (ebib-keywords-file-save-on-exit 'always)
    (ebib-keywords-file my-ebib-keywords-file))
#+end_src

** Markdown
Markdown パーサとして [[https://github.com/markedjs/marked][marked]] を利用します．
インストールするには =npm install -g marked= とします．

electric pair の設定を適宜追加します．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (defvar my-markdown-electric-pair-pairs
    '((?` . ?`)
      (?* . ?*)
      (?_ . ?_)))

  (defun my-markdown-electric-pair-mode ()
    "Use `markdown-mode' with `electric-pair-mode'."
    (electric-pair-local-mode +1)
    (setq-local electric-pair-pairs (append electric-pair-pairs
                                            my-markdown-electric-pair-pairs)))
#+end_src

ファイル名が ~README.md~ と一致する場合 =gfm-mode= で開きます．
それ以外で拡張子が ~.md~ の場合は =markdown-mode= で開きます．

#+begin_src emacs-lisp
  (use-package markdown-mode
    :defines (my-markdown-electric-pair-pairs)
    :functions (my-markdown-electric-pair-mode)
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode))
    :hook ((gfm-mode markdown-mode) . my-markdown-electric-pair-mode)
    :init
    (setq markdown-command "marked")
    :custom
    (markdown-fontify-code-blocks-natively t))
#+end_src

Org-mode のように =C-c '= でコードブロックを編集するには [[https://github.com/Fanael/edit-indirect/][edit-indirect]] パッケージが必要なようです．

よく使うキーバインドについて，次のようにまとめておきます．

| key           | action                        |
|---------------+-------------------------------|
| =C-c C-l=     | Insert links                  |
| =C-c C-s i=   | Markup (italic)               |
| =C-c C-s b=   | Markup (bold)                 |
| =C-c C-s c=   | Markup (inline code)          |
| =C-c C-s k=   | Markup (<kbd> tag)            |
| =C-c C-s q=   | Markup (blockquote)           |
| =C-c C-s h=   | Insert a heading              |
| =C-c C-s <n>= | Insert a heading of level <n> |
| =C-c C-s f=   | Insert footnotes              |

=markdown-command= を利用して HTML へ変換，プレビュー等を行えます．

| key         | action                                |
|-------------+---------------------------------------|
| =C-c C-c m= | Output to ~*markdown-output*~ buffer  |
| =C-c C-c p= | Output to browser via temporary file  |
| =C-c C-c e= | Output to ~basename.html~             |
| =C-c C-c v= | Output to browser via ~basename.html~ |

サブツリーの移動については次のようなキーバインドが用意されています．

| key           | action    |
|---------------+-----------|
| =C-c <up>=    | Move up   |
| =C-c <down>=  | Move down |
| =C-c <right>= | Demote    |
| =C-c <left>=  | Promote   |

* Programming Languages
** C/C++
Language Server として [[https://github.com/MaskRay/ccls][ccls]] を利用します．
ccls のインストール方法については [[https://github.com/MaskRay/ccls/wiki/Build][Wiki/Build]] を参照してください．

macOS の場合は homebrew からインストールできます．

#+begin_src sh :tangle no
  brew tap twlz0ne/homebrew-ccls
  brew install ccls
#+end_src

#+begin_src emacs-lisp
  (use-package ccls
    :hook ((c-mode c++-mode objc-mode) . (lambda ()
                                           (require 'ccls)
                                           (lsp)))
    :config
    (setq ccls-sem-highlight-method 'font-lock))

  (use-package modern-cpp-font-lock
    :commands (modern-c++-font-lock-mode)
    :hook (c++-mode-hook . modern-c++-font-lock-mode)
    :blackout t)
#+end_src

** Emacs Lisp
flycheck の emacs-lisp-checkdoc の警告はあまり有益に思えないため無効化しています．
有効化するには ~C-u M-x flycheck-disable-checker~ とします．

#+begin_src emacs-lisp
  (use-feature elisp-mode
    :blackout (lisp-interaction-mode . "Lisp-Interaction"))
#+end_src

** Ocaml
OCaml の編集には [[https://github.com/ocaml/tuareg][tuareg-mode]] を利用します．
[[https://github.com/freebroccolo/ocaml-language-server][ocaml-language-server]] と lsp-mode を利用して補完等を行います．
インストールは

 #+begin_src sh :tangle no
   ~$ npm install -g ocaml-language-server
   ~$ opam install merlin               # if needed
 #+end_src

とします．
キチンと使っていないので後で加筆するかもしれません．

[[https://khady.info/emacs-ocaml-lsp.html][このブログ]]によれば merlin と language server が統合されたようなので近々設定を書き換えるかもしれません．

#+begin_src emacs-lisp
  (use-package tuareg
    :hook (tuareg-mode . lsp))
#+end_src

** Python
Emacs 同梱の ~python.el~ を利用します．
~python-mode.el~ ではないことに注意してください．

~python3~ がインストールされている場合， ~python2~ ではなく ~python3~ を使うようにします．
またインデントには空白 4 文字を用いるようにします．

LSP ([[https://github.com/palantir/python-language-server][pyls]]) を利用して補完・文法チェックを行います．
インストールは

#+begin_src sh :tangle no
  ~$ pip install 'python-language-server[all]'
#+end_src

とします．

#+begin_src emacs-lisp
  (use-feature python
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :hook (python-mode . (lambda ()
                           (lsp)
                           (setq-local indent-tabs-mode nil)
                           (setq-local tab-width 4)))
    :config
    (when (executable-find "python3")
      ;; use python3 if it exists
      (setq python-shell-interpreter "python3")))
#+end_src

* Appearance
** Color theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] の ~doom-dracula~ テーマを利用します．

#+begin_src emacs-lisp
  (use-package doom-themes
    :demand t
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    (doom-neotree-file-icons t)
    :config
    (load-theme 'doom-dracula t)
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-org-config))
#+end_src

またモードラインを [[https://github.com/seagle0128/doom-modeline][doom-modeline]] でカスタマイズします．

#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-buffer-file-name-style 'truncate-upto-project)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-color-icon t)
    (find-file-visit-truename t)
    :config
    (setq doom-modeline-mu4e nil)
    (setq doom-modeline-irc nil))
#+end_src

** Frame
ツールバー等，特に必要のないものは表示しないようにします．

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (size-indication-mode +1)
  (setq frame-title-format "%f")
#+end_src

Emacs 26 以上を使用している場合 ~display-line-numbers-mode~ を利用します．

#+begin_src emacs-lisp
  (when (version<= "26.0.50" emacs-version)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode))
#+end_src

Emacs 起動時にフレームを最大化します．

#+begin_src emacs-lisp
  (set-frame-parameter nil 'fullscreen 'maximized)
#+end_src

** Font
フォントに関しては，例えば，次のように ~local-conf.el~ に記述します．

#+begin_src emacs-lisp :tangle no
  (set-face-attribute 'default nil
                      :family "Source Han Code JP"
                      :height 140)
#+end_src
* Global keybindings
global-map のキーバインドを次のように変更します．

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-m") #'newline-and-indent)
  (define-key global-map (kbd "C-2") #'set-mark-command)
  (define-key global-map (kbd "C-t") #'other-window)
  (define-key global-map (kbd "C-;") #'comment-line)
  (define-key global-map (kbd "C-v") #'hydra-navi/body)
#+end_src

また ~C-h~ を ~DEL~ と入れ替えます．
=help-for-help= は ~C-x ?~ にバインドします．

#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "C-h") (kbd "DEL"))
  (define-key global-map (kbd "C-x ?") 'help-for-help)
#+end_src
* Local configuration
** Overview
~.emacs.d/local-conf.el~ にマシン・環境ごとの設定を記述します．
また Customize で設定したカスタム変数等も ~local-conf.el~ に記述されます．

#+begin_src emacs-lisp
  (setq custom-file my-local-config-file)
  (load my-local-config-file t)
#+end_src

** For EMP (Emacs Mac Port)
[[https://github.com/railwaycat/homebrew-emacsmacport][EMP 版の Emacs]] では NS 版のものと挙動が異なります．
オプションキーをメタキーとして使うために次を記述します．

#+begin_src emacs-lisp :tangle no
  (setq mac-option-modifier 'meta)
#+end_src

** SINGULAR
[[https://www.singular.uni-kl.de/][SINGULAR]] は代数計算ソフトの一つです．
SINGULAR を Emacs 上で利用するには，インストール後に次のような記述を追加します．
ここで ~<singular-emacs-home-directory>~ は，例えば macOS に Homebrew を利用してバージョン 4.1.1_5 を
インストールした場合 ~/usr/local/Cellar/singular/4.1.1_5/share/singular/emacs~ になります．

記述を追加後 =M-x singular= で Emacs 上で SINGULAR が利用できます．
詳しくは [[https://www.singular.uni-kl.de/Manual/latest/sing_23.htm#SEC30][Online Manual - 3.2.2 Running SINGULAR under Emacs]] を参照してください．

#+begin_src emacs-lisp :tangle no
  (add-to-list 'load-path "<singular-emacs-home-directory>")
  (autoload 'singular "singular"
    "Start Singular using default value." t)
  (autoload 'singular-other "singular"
    "Ask for arguments and start Singular." t)
#+end_src

** Macaulay2
[[http://www2.macaulay2.com/Macaulay2/][Macaulay2]] は主に代数幾何学および可換環論のための代数計算ソフトの一つです．

=setup()= あるいは =setupEmacs()= を =Macaulay2= 内で実行すると PATH の追加および Emacs 関連のファイルの生成が行われます．
特にホームディレクトリ直下に ~.emacs-Macaulay2~ ができるはずです．

Macaulay2 を Emacs で使うにはこのファイルをロードすれば良いです．
また M2-comint-mode で ~C-<return>~ で，式を実行せず改行できるようにしておきます．

#+begin_src emacs-lisp :tangle no
  (load "~/.emacs-Macaulay2" t)
  (with-eval-after-load "M2"
    (define-key M2-comint-mode-map (kbd "C-<return>") #'M2-newline-and-indent))
#+end_src

* License
本設定ファイルは [[https://www.gnu.org/licenses/gpl.html][GNU 一般公衆ライセンス]] (バージョン 3 または以降の任意のバージョン) で公開しています．

また [[https://mahito1594.github.io/dotemacs/][GitHub Page]] の表示に [[https://orgmode.org/worg/style/worg.css][~worg.css~]] を利用しています．
~worg.css~ は GNU 一般公衆ライセンス (バージョン 3 または以降の任意のバージョン) で公開されています．

#+begin_src emacs-lisp :tangle ./elisp/utility.el
  (provide 'utility)
  ;;; utility.el ends here
#+end_src

#+begin_src emacs-lisp
  (provide 'my-init)
  ;;; my-init.el ends here
#+end_src

# Local Variables:
# org-babel-default-header-args: ((:session . "none")
#                                 (:results . "replace")
#                                 (:exports . "code")
#                                 (:cache . "no")
#                                 (:noweb . "no")
#                                 (:hlines . "no")
#                                 (:tangle . "./elisp/my-init.el"))
# End:

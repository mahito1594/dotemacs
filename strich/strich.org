#+STARTUP: indent
#+TITLE: Strich: My configuration file for Emacs
#+AUTHOR: Mahito TANNO
#+DATE:
#+EXPORT_FILE_NAME: ./doc/index.html
#+OPTIONS: H:2
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="worg.css"/>

* Introduction
** Strich
~strich.el~ は個人的な Emacs の設定をまとめたものです．
Emacs バージョン 25.4 以降での利用を想定しています．
特にバージョン 26 以降での利用を強く勧めます．

Strich とは角度の単位の一つです (参考 [[https://de.wikipedia.org/wiki/Strich_(Winkeleinheit)][Wikpedia]] )．

Strich は以下に強い影響を受けました．

- radian
- Centaur Emacs
- doom-emacs
- Ladicle Emacs

Strich を編集する際は ~strich.el~ ではなく ~strich.org~ を編集します．
編集後に =org-babel-tangle-file= を用いて ~strich.el~ を生成します．

#+begin_src emacs-lisp :exports none
  ;;; strich.el --- My configuration file for Emacs -*- lexical-binding:t -*-

  ;; Copyright (C) 2019  TANNO Mahito

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; `strich.el' is my configuration for Emacs.  You can get details in
  ;; `strich.org' or in `strich.html' generated by Org-mode.

  ;; Do not edit this file directly.  If you want to edit `strich.el',
  ;; you must edit `strich.org' instead.

  ;;; Code:
#+end_src
** init.el
~init.el~ は ~strich.el~ を読み込みます．
ただし Emacs のバージョンが古い場合は ~strich.el~ は読み込まれません．

#+begin_src emacs-lisp :tangle no
  (defvar strich-minimum-emacs-version "25.4")

  (if (version< emacs-version strich-minimum-version)
      (error (concat "Strich requires Emacs ver. %s or later, "
                     "but you use Emacs ver. %s!")
             strich-minimum-emacs-version emacs-version)
    (require 'strich (locate-user-emacs-file "strich.el") t))
#+end_src

* Fundamental 
** Variables
#+begin_src emacs-lisp
  (defgroup strich nil
    "Customize your Emacs configuration via Strich."
    :prefix "strich-"
    :group 'emacs
    :link '(url-link :tag "GitHub" "https://github.com/mahito1594/dotemacs"))
#+end_src

#+begin_src emacs-lisp
  (defvar strich-locate-strich-elisp-file (expand-file-name (concat user-emacs-directory
                                                                    "strich/strich.el"))
    "Place where `strich.el' should be.")

  (defvar strich-locate-strich-org-file (expand-file-name (concat user-emacs-directory
                                                                  "strich/strich.org"))
    "Place where `strich.org' should be.")

  (defvar strich-locate-strich-html-file (expand-file-name (concat user-emacs-directory
                                                                   "strich/doc/index.html"))
    "Place where `strich.html' shouled be.")
#+end_src

#+begin_src emacs-lisp
  (defcustom strich-backup-directory (locate-user-emacs-file "backups/")
    "We save automatically files into the directory:
  We set `backup-directory-alist' and `auto-save-file-name-transforms' to `strich-backup-directory'."
    :type 'directory
    :group 'strich)
#+end_src

** Functions
#+begin_src emacs-lisp
  (defun strich-open-html-doc ()
    "Open Strich document in default browser."
    (interactive)
    (browse-url-of-file strich-locate-strich-html-file))

  (defun strich-open-org-doc ()
    "Open Strich document in Org-mode."
    (interactive)
    (view-file strich-locate-strich-org-file))
#+end_src

#+begin_src emacs-lisp
  (defun strich-edit-strich ()
    "Open `strich.org' to edit."
    (interactive)
    (find-file strich-locate-strich-org-file))
#+end_src

#+begin_src emacs-lisp
  (defun strich-make-init-elisp ()
    "Make `strich.el' with `org-babel-tangle'."
    (interactive)
    (with-current-buffer
        (find-file-noselect strich-locate-strich-org-file)
      (org-babel-tangle))
    (write-region (concat ";; Local Variables:\n"
                          ";; buffer-read-only: t\n"
                          ";; End:")
                  nil strich-locate-strich-elisp-file 'append)
    (message "%s is created!" strich-locate-strich-elisp-file))
#+end_src

#+begin_src emacs-lisp
  (defun strich-make-document-html ()
    "Make document html file."
    (interactive)
    (straight-use-package 'org)
    (straight-use-package 'htmlize)
    (with-current-buffer (find-file-noselect strich-locate-strich-org-file)
      (setq-local org-html-htmlize-output-type 'css)
      (org-html-export-to-html)))
#+end_src

** Package manager
Strich はパッケージマネージャとして ~straight.el~ と ~use-package.el~ を利用します

*** straight.el
[[https://github.com/raxod502/straight.el][straight.el]] は Emacs のパッケージマネージャの 1 つです．

#+begin_quote
next-generation, purely functional package manager for the Emacs hacker.
#+end_quote

~develop~ ブランチの ~straight.el~ をインストールします．

デフォルトのままでは Emacs の起動が遅くなるので ~straight-check-for-modifications~ を ~live-with-find~ に設定しておきます．
~live-with-find~ は ~(check-on-save find-when-checking)~ と等価です．

#+begin_src emacs-lisp
  (setq straight-repository-branch "develop") ; use the develop branch of straight.el
  (setq straight-check-for-modifications 'live-with-find) ; => '(check-on-save find-when-checking)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

*** use-package.el
[[https://github.com/jwiegley/use-package][use-package]] を用いてパッケージの設定を feature 単位で記述します．

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

keywords は次の順序で書くようにします:

- =:defines=
- =:functions=
- =:preface=
- =:if= (or =:when=)
- =:straight=
- =:load-path=
- =:commands=
- =:init=
- =:mode=
- =:interpreter=
- =:hook=
- =:bind=
- =:demand=
- =:after=
- =:custom=
- =:config=
- =:blackout= 

~:preface~ は ~:if~ 節の判定に関わらず読み込まれます．
他パッケージで定義される変数や関数を用いる場合 ~:defines~ や ~:functions~ に列挙しておくのが安全なようです．
基本的に ~straight.el~ を用いてパッケージをインストールするようにします．
また，パッケージは常に遅延ロードします．
遅延ロードをさせないときは明示的に =:demand t= を指定します．
遅延ロードの際， =:after= などのキーワードを併用する場合は注意が必要です．
[[https://jwiegley.github.io/use-package/keywords/#after]] を参照してください．

#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (setq use-package-always-defer t)
#+end_src

build-in の機能を用いるため ~use-feature~ マクロを定めます．
~use-feature~ は radian.el を参考にしました．

#+begin_src emacs-lisp
  (defmacro use-feature (name &rest args)
    "Like `use-package', but with `straight-use-package-by-default' disabled."
    (declare (indent defun))
    `(use-package ,name
       :straight nil
       ,@args))
#+end_src

** Some package
いくつかのパッケージを先にインストールします．
これは Emacs 同梱の (古い) バージョンのパッケージの読み込みを避けるためです．

*** Org-mode
2019年3月現在の ~straight.el~ ではデフォルトで最新の Org-mode をインストールすることができます．

#+begin_src emacs-lisp
  (straight-use-package 'org)
#+end_src

*** blackout
[[https://github.com/raxod502/blackout][blackout]] は deminish や delight のように，メジャー・マイナーモードのモードラインの表示をカスタマイズできます．

#+begin_src emacs-lisp
  (use-package blackout
    :straight (:host github :repo "raxod502/blackout")
    :demand t)
#+end_src

*** all-the-icons
いくつかのパッケージで ~all-the-icons~ のフォントを使用します．
フォントが未インストールの場合，自動的にインストールします．

#+begin_src emacs-lisp
  (use-package all-the-icons
    :demand t
    :config
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts t)))
#+end_src

* Utilities
** Language, Codings
日本語かつ UTF8 を使用するようにします．

#+begin_src emacs-lisp
  (set-language-environment "Japanese")
  (prefer-coding-system 'utf-8)
#+end_src

また Linux 使用時は ~mozc~ を用いて日本語入力を行います．
別途 ~emacs-mozc-bin~ をインストールする必要があります．

#+begin_src emacs-lisp
  (use-package mozc
    :if (eq system-type 'gnu/linux)
    :demand t
    :config
    (setq default-input-method "japanese-mozc"))
#+end_src

macOS 使用時はファイル名の文字コードの問題があります．

#+begin_src emacs-lisp
  (use-feature ucs-normalize
    :if (eq system-type 'darwin)
    :demand t
    :config
    (set-file-name-coding-system 'utf-8-hfs)
    (setq locale-coding-system 'utf-8-hfs))
#+end_src

** Exec path
ログインシェルの環境変数を引き継ぎます．

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :demand t
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Server
Emacs 起動後に =server-start= します．

#+begin_src emacs-lisp
(use-feature server
  :hook (after-init . server-mode))
#+end_src

** Backup files
自動バックアップとオートセーブファイルを ~.emacs.d/backups~ に集めます．
~.emacs.d/backups~ はカスタム変数 =strich-backup-directory= で変更できます．

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,strich-backup-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,strich-backup-directory t)))
#+end_src

** Directories
*** dired
~dired-mode~ の際，ファイルのアイコンを表示するようにします．

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :if (window-system)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** neotree
ツリープラグインとして [[https://github.com/jaypei/emacs-neotree][neotree]] を用います．
~C-c t~ で起動します．
GUI での使用の際，all-the-icons を用いてアイコンを表示するようにします．

#+begin_src emacs-lisp
  (use-package neotree
    :bind (("C-c t" . neotree-toggle))
    :custom
    (neo-theme (if (display-graphic-p)
                   'classic
                 'arrow)))
#+end_src

** Candidates
*** Ivy, Counsel and swiper
補完インターフェイスとして [[https://github.com/abo-abo/swiper][Ivy/Counsel]] を利用します．
詳しい使い方は[[https://oremacs.com/swiper/][ユーザマニュアル]]を参照してください．

#+begin_src emacs-lisp
  (use-package counsel
    :hook ((after-init . ivy-mode)
           (ivy-mode . counsel-mode))
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-S-s" . swiper-all)
           ("C-c C-r" . ivy-resume)
           :map ivy-minibuffer-map
           ("<tab>" . ivy-alt-done)
           ("C-w" . ivy-yank-word))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    (ivy-wrap t)
    (ivy-format-function 'ivy-format-function-arrow)
    (counsel-yank-pop "\n---------\n")
    (ivy-initial-inputs-alist nil)
    :blackout t)
#+end_src

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] を用いてバッファ切り替えの際などにアイコンを表示するようにします．

#+begin_src emacs-lisp
  (use-package ivy-rich
    :defines (all-the-icons-dir-icon-alist)
    :functions (all-the-icons-icon-family
                all-the-icons-icon-for-mode
                all-the-icons-icon-for-file
                all-the-icons-octicon
                all-the-icons-match-to-alist)
    :preface
    (defun strich-ivy-rich-buffer-icon (candidate)
      "Show buffer isons in `ivy-rich', only on GUI."
      (when (display-graphic-p)
        (with-current-buffer
            (get-buffer candidate)
          (let ((icon (all-the-icons-icon-for-mode major-mode)))
            (if (symbolp icon)
                (all-the-icons-icon-for-mode 'fundamental-mode)
              icon)))))
    (defun strich-ivy-rich-file-icon (candidate)
      "Show file icons in `ivy-rich', only on GUI."
      (when (display-graphic-p)
        (let ((icon
               ;; for directories
               (if (file-directory-p candidate)
                   (cond
                    ;; for `tramp-mode'
                    ((and (fboundp 'tramp-tramp-file-p)
                          (tramp-tramp-file-p default-directory))
                     (all-the-icons-octicon "file-directory"))
                    ;; for symbolic links
                    ((file-symlink-p candidate)
                     (all-the-icons-octicon "file-symlink-directory"))
                    ;; for git submodules
                    ((all-the-icons-dir-is-submodule candidate)
                     (all-the-icons-octicon "file-submodule"))
                    ;; for version-controled by git
                    ((file-exists-p (format "%s/.git" candidate))
                     (all-the-icons-octicon "repo"))
                    ;; otherwise
                    (t (let ((matcher (all-the-icons-match-to-alist candidate all-the-icons-dir-icon-alist)))
                         (apply (car matcher) (list (cadr matcher))))))
                 ;; for files
                 (all-the-icons-icon-for-file candidate))))
          (unless (symbolp icon)
            (propertize icon
                        'face `(:family ,(all-the-icons-icon-family icon) :height 1.1))))))
    :hook (ivy-mode . ivy-rich-mode)
    :custom
    (ivy-rich-path-style 'abbrev)
    (ivy-rich-display-transformers-list
     '(ivy-switch-buffer
       (:columns
        ((strich-ivy-rich-buffer-icon :width 2)
         (ivy-rich-candidate (:width 30))
         (ivy-rich-switch-buffer-size (:width 7))
         (ivy-rich-switch-buffer-indicators (:width 4 :face error :align left))
         (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
         (ivy-rich-switch-buffer-project (:width 15 :face success))
         (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
        :predicate
        (lambda (cand) (get-buffer cand)))
       counsel-M-x
       (:columns
        ((counsel-M-x-transformer (:width 40))
         (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
       counsel-describe-function
       (:columns
        ((counsel-describe-function-transformer (:width 40))
         (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
       counsel-describe-variable
       (:columns
        ((counsel-describe-variable-transformer (:width 40))
         (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
       counsel-recentf
       (:columns
        ((ivy-rich-candidate (:width 0.8))
         (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))
       counsel-find-file
       (:columns
        ((strich-ivy-rich-file-icon :width 2)
         (ivy-rich-candidate)))
       counsel-git
       (:columns
        ((strich-ivy-rich-file-icon :width 2)
         (ivy-rich-candidate)))))
    :blackout t)
#+end_src

[[https://github.com/DarwinAwardWinner/amx][amx]] を用いて ~M-x~ を ivy と統合します．

#+begin_src emacs-lisp
  (use-package amx
    :hook (ivy-mode . amx-mode))
#+end_src

*** emacs-which-key
[[https://github.com/justbur/emacs-which-key][which-key]] を用いてキーバインドを表示させます．

#+begin_src emacs-lisp
  (use-package which-key
    :hook (after-init . which-key-mode)
    :bind (:map which-key-mode-map
                ("C-x DEL" . which-key-C-h-dispatch)
                ("C-c DEL" . which-key-C-h-dispatch))
    :custom
    (which-key-popup-type 'side-window)
    (which-key-side-window-location 'bottom)
    :blackout t)
#+end_src

** Others
*** Parenthesis
対応する括弧類は自動的に挿入し，また強調するようにします．

#+begin_src emacs-lisp
  (use-feature elec-pair
    :hook (after-init . electric-pair-mode))

  (use-feature paren
    :hook (after-init . show-paren-mode)
    :custom
    (show-paren-style 'mixed))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Whitespace
~C-c w~ で空白文字を可視化します．

#+begin_src emacs-lisp
  (use-feature whitespace
    :commands (whitespace-mode)
    :bind (("C-c w" . whitespace-mode))
    :custom
    (whitespace-style '(
                        face
                        trailing
                        tabs
                        spaces
                        empty
                        space-mark
                        tab-mark
                        ))
    :blackout t)
#+end_src

*** Cursor
[[https://github.com/Malabarba/beacon][beacon]] を用いてカーソルを目立たせます．

#+begin_src emacs-lisp
  (use-package beacon
    :hook (after-init . beacon-mode)
    :custom
    (beacon-color "yellow"))
#+end_src

*** Region
選択中のリージョンをハイライトします．

#+begin_src emacs-lisp
  (add-hook 'after-init-hook #'transient-mark-mode)
#+end_src

*** Ring bell
エラー時のベル音を消します．

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

* Completion and syntax checking
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :blackout t)
#+end_src

** Company
補完には [[https://github.com/company-mode/company-mode][company-mode]] を用います．
各種設定は [[https://github.com/company-mode/company-mode/wiki/Switching-from-AC][Switching from AC]] を参考にしました．
=:bind= キーワードを使うとうまく読み込まないため， =:config= と =define-key= を利用しています

#+begin_src emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :config
    (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
    (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (setq company-idle-delay 0)
    (setq company-selection-wrap-around t)
    (setq company-require-match 'never)
    :blackout t)
#+end_src

[[https://github.com/expez/company-quickhelp][company-quickhelp]] を用いて補完候補のドキュメントを読めるようにしておきます．

#+begin_src emacs-lisp
  (use-package company-quickhelp
    :if (window-system)
    :hook (company-mode . company-quickhelp-mode))
#+end_src

[[https://github.com/sebastiencs/company-box][company-box]] を用いて補完候補にアイコンを表示します．
デフォルトの設定のままだと，アイコンが大きく感じるので適当に調整をします．

#+begin_src emacs-lisp
  (use-package company-box
    :functions (all-the-icons-faicon all-the-icons-octicon all-the-icons-material all-the-icons-alltheicon)
    :preface
    (defvar strich-company-box-icons-all-the-icons
      `((Unknown       . ,(all-the-icons-faicon     "cog"                      :height 0.9))
        (Text          . ,(all-the-icons-octicon    "file-text"                :height 0.9))
        (Method        . ,(all-the-icons-faicon     "cube"                     :height 0.9))
        (Function      . ,(all-the-icons-faicon     "cube"                     :height 0.9))
        (Constructor   . ,(all-the-icons-faicon     "cube"                     :height 0.9))
        (Field         . ,(all-the-icons-faicon     "cog"                      :height 0.9))
        (Variable      . ,(all-the-icons-faicon     "cog"                      :height 0.9))
        (Class         . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
        (Interface     . ,(all-the-icons-material   "share"                    :height 0.9))
        (Module        . ,(all-the-icons-alltheicon "less"                     :height 0.9))
        (Property      . ,(all-the-icons-faicon     "wrench"                   :height 0.9))
        (Unit          . ,(all-the-icons-material   "settings_system_daydream" :height 0.9))
        (Value         . ,(all-the-icons-material   "format_align_right"       :height 0.9))
        (Enum          . ,(all-the-icons-material   "content_copy"             :height 0.9))
        (Keyword       . ,(all-the-icons-material   "filter_center_focus"      :height 0.9))
        (Snippet       . ,(all-the-icons-material   "content_paste"            :height 0.9))
        (Color         . ,(all-the-icons-material   "palette"                  :height 0.9))
        (File          . ,(all-the-icons-faicon     "file"                     :height 0.9))
        (Reference     . ,(all-the-icons-material   "collections_bookmark"     :height 0.9))
        (Folder        . ,(all-the-icons-faicon     "folder"                   :height 0.9))
        (EnumMember    . ,(all-the-icons-material   "format_align_right"       :height 0.9))
        (Constant      . ,(all-the-icons-faicon     "square-o"                 :height 0.9))
        (Struct        . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
        (Event         . ,(all-the-icons-faicon     "bolt"                     :height 0.9))
        (Operator      . ,(all-the-icons-material   "control_point"            :height 0.9))
        (TypeParameter . ,(all-the-icons-faicon     "cogs"                     :height 0.9))
        (Template      . ,(all-the-icons-material   "format_align_center"      :height 0.9))
        ))
    :if (and (window-system)
             (>= emacs-major-version 26))
    :hook (company-mode . company-box-mode)
    :custom
    (company-box-show-single-candidate t)
    (company-box-max-candidates 50)
    :config
    (setq company-box-backends-colors nil)
    (setq company-box-icons-alist 'strich-company-box-icons-all-the-icons)
    :blackout t)
#+end_src

** Flycheck
文法チェックには [[https://www.flycheck.org/en/latest/][Flycheck]] を利用します．
後述の [[LSP][LSP]] を用いる場合には暴走するという情報があるので要確認です．

#+begin_src emacs-lisp
  (use-package flycheck
    :hook (after-init . global-flycheck-mode))
#+end_src

エラー内容の表示に [[https://github.com/flycheck/flycheck-popup-tip][flycheck-popup-tip]] を利用します．

#+begin_src emacs-lisp
  (use-package flycheck-popup-tip
    :hook (flycheck-mode . flycheck-popup-tip-mode))
#+end_src

** LSP
* Programming Languages
** C/C++

** Emacs Lisp

** Ocaml

** Python

* Documents
** TeX/LaTeX

** Org-mode

* Appearance
** Color theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] の ~doom-dracula~ テーマを利用する．

#+begin_src emacs-lisp
  (use-package doom-themes
    :demand t
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    (doom-neotree-file-icons t)
    :config
    (load-theme 'doom-dracula t)
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-org-config))
#+end_src

またモードラインを [[https://github.com/seagle0128/doom-modeline][doom-modeline]] でカスタマイズする．

#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-buffer-file-name-style 'truncate-upto-project)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-color-icon t)
    (find-file-visit-truename t)
    :config
    (setq doom-modeline-mu4e nil
          doom-modeline-irc nil))
#+end_src

** Frame
ツールバー等，特に必要のないものは表示しないようにする．

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (size-indication-mode +1)
  (setq frame-title-format "%f")
#+end_src

Emacs 26 以上を使用している場合 ~display-line-numbers-mode~ を利用する．
そうでない場合は ~columnu-number-mode~ と ~line-number-mode~ を利用する．

#+begin_src emacs-lisp
  (if (version<= "26.0.50" emacs-version)
      (progn
        (global-display-line-numbers-mode)
        (column-number-mode -1)
        (line-number-mode -1))
    (column-number-mode +1)
    (line-number-mode +1))
#+end_src

Emacs 起動時にフレームを最大化します．

#+begin_src emacs-lisp
  (set-frame-parameter nil 'fullscreen 'maximized)
#+end_src

** Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "Source Han Code JP"
                      :height 140)
#+end_src
* Global keybindings
global-map のキーバインドを次のように変更します．

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-m") 'newline-and-indent)
  (define-key global-map (kbd "C-2") 'set-mark-command)
  (define-key global-map (kbd "C-t") 'other-window)
  (define-key global-map (kbd "C-;") 'comment-line)
#+end_src

また ~C-h~ を ~DEL~ と入れ替えます．
=help-for-help= は ~C-x ?~ にバインドします．

#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "C-h") (kbd "DEL"))
  (define-key global-map (kbd "C-x ?") 'help-for-help)
#+end_src

* License
本設定ファイル (~strich.el~) は [[https://www.gnu.org/licenses/gpl.html][GNU 一般公衆ライセンス]] (バージョン 3 または以降の任意のバージョン) で公開しています．

#+begin_src emacs-lisp
  (provide 'strich)
  ;;; strich.el ends here
#+end_src

# Local Variables:
# org-babel-default-header-args: ((:session . "none")
#                                 (:results . "replace")
#                                 (:exports . "code")
#                                 (:cache . "no")
#                                 (:noweb . "no")
#                                 (:hlines . "no")
#                                 (:tangle . "yes"))
# End:
